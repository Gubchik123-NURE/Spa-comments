{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":"<p>\u0426\u0435 \u043b\u0435\u043d\u0434\u0456\u043d\u0433\u043e\u0432\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u0434\u043b\u044f \u0437\u0430\u043b\u0438\u0448\u0435\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432. \u041a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0434\u043e\u0434\u0430\u0432\u0430\u0442\u0438 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0437 \u0440\u0456\u0437\u043d\u0438\u043c\u0438 \u0434\u043e\u043f\u043e\u043c\u0456\u0436\u043d\u0438\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0456\u044f\u043c\u0438, \u0456 \u0432\u0441\u0456 \u0432\u0432\u0435\u0434\u0435\u043d\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u044e\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u043b\u044f\u0446\u0456\u0439\u043d\u0456\u0439 \u0431\u0430\u0437\u0456 \u0434\u0430\u043d\u0438\u0445 (\u0411\u0414), \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0447\u0438 \u0434\u0430\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0434\u043b\u044f \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457.</p>"},{"location":"#_1","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0456\u044f","text":""},{"location":"#_2","title":"\u041c\u043e\u0434\u0443\u043b\u0456 \u043f\u0440\u043e\u0435\u043a\u0442\u0443","text":""},{"location":"#_3","title":"\u0414\u043e\u043f\u043e\u043c\u0456\u0436\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457","text":"<ul> <li>\u041a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u0438 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0437 \u0442\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438:<ol> <li>\u0406\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (\u0431\u0443\u043a\u0432\u0435\u043d\u043e-\u0446\u0438\u0444\u0440\u043e\u0432\u0456 \u0441\u0438\u043c\u0432\u043e\u043b\u0438) - \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u043f\u043e\u043b\u0435.</li> <li>\u0415\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430 \u043f\u043e\u0448\u0442\u0430 (\u0444\u043e\u0440\u043c\u0430\u0442 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438) - \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u043f\u043e\u043b\u0435.</li> <li>\u0414\u043e\u043c\u0430\u0448\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430 (\u0444\u043e\u0440\u043c\u0430\u0442 URL) - \u043d\u0435\u043e\u0431\u043e\u0432'\u044f\u0437\u043a\u043e\u0432\u0435 \u043f\u043e\u043b\u0435.</li> <li>Captcha (\u0431\u0443\u043a\u0432\u0435\u043d\u043e-\u0446\u0438\u0444\u0440\u043e\u0432\u0456 \u0441\u0438\u043c\u0432\u043e\u043b\u0438) - \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u043f\u043e\u043b\u0435.</li> <li>\u0422\u0435\u043a\u0441\u0442 (\u041e\u0441\u043d\u043e\u0432\u043d\u0435 \u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f) - \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u043f\u043e\u043b\u0435. \u0422\u0435\u0433\u0438 HTML, \u0437\u0430 \u0432\u0438\u043d\u044f\u0442\u043a\u043e\u043c \u0434\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u0438\u0445, \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u044c\u0441\u044f.</li> </ol> </li> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438 \u043c\u0430\u0454 \u0442\u0430\u043a\u0456 \u0432\u0438\u043c\u043e\u0433\u0438:<ol> <li>\u041a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u043c\u0430\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0435\u0439 (\u043a\u0430\u0441\u043a\u0430\u0434\u043d\u0438\u0439 \u0432\u0438\u0434).</li> <li>\u041a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u043c\u0443 \u0440\u0456\u0432\u043d\u0456 (\u043d\u0435 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456) \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u044c\u0441\u044f \u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0456 \u0442\u0430\u0431\u043b\u0438\u0446\u0456 \u0437 \u043c\u043e\u0436\u043b\u0438\u0432\u0456\u0441\u0442\u044e \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u043d\u0430 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u043f\u043e\u043b\u044f: \u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430, \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430 \u043f\u043e\u0448\u0442\u0430 \u0442\u0430 \u0434\u0430\u0442\u0430 \u0434\u043e\u0434\u0430\u0432\u0430\u043d\u043d\u044f (\u044f\u043a \u0443 \u043f\u043e\u0440\u044f\u0434\u043d\u0443 \u0437\u0440\u043e\u0441\u0442\u0430\u043d\u043d\u044f, \u0442\u0430\u043a \u0456 \u0443 \u0441\u043f\u0430\u0434\u0430\u043d\u043d\u044f).</li> <li>\u0412\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f 25 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</li> </ol> </li> <li>JavaScript:<ol> <li>\u0412\u0430\u043b\u0456\u0434\u0430\u0446\u0456\u044f \u0432\u0445\u0456\u0434\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0456 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0442\u0430 \u043a\u043b\u0456\u0454\u043d\u0442\u0430.</li> <li>\u041f\u0430\u043d\u0435\u043b\u044c \u0437 \u043a\u043d\u043e\u043f\u043e\u043a \u0434\u043b\u044f \u0442\u0435\u0433\u0456\u0432 HTML (<code>[i]</code>, <code>[strong]</code>, <code>[code]</code>, <code>[a]</code>).</li> </ol> </li> <li>\u041e\u0431\u0440\u043e\u0431\u043a\u0430 \u0444\u0430\u0439\u043b\u0456\u0432:<ol> <li>\u041a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0434\u043e\u0434\u0430\u0442\u0438 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0430\u0431\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0438\u0439 \u0444\u0430\u0439\u043b \u0434\u043e \u0441\u0432\u043e\u0433\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.</li> <li>\u0417\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0456\u0439\u043d\u043e \u0437\u043c\u0456\u043d\u044e\u0454\u0442\u044c\u0441\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0438\u0439 \u0440\u043e\u0437\u043c\u0456\u0440 320x240 \u043f\u0456\u043a\u0441\u0435\u043b\u0456\u0432, \u044f\u043a\u0449\u043e \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u0435 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0431\u0456\u043b\u044c\u0448\u0435. \u0414\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u0456 \u0444\u043e\u0440\u043c\u0430\u0442\u0438 \u0444\u0430\u0439\u043b\u0456\u0432 - \u0446\u0435 JPG, GIF \u0442\u0430 PNG.</li> <li>\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u0456 \u0444\u0430\u0439\u043b\u0438 \u043d\u0435 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043f\u0435\u0440\u0435\u0432\u0438\u0449\u0443\u0432\u0430\u0442\u0438 \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 100 \u043a\u0431, \u0430 \u0454\u0434\u0438\u043d\u0438\u0439 \u0434\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u0438\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 - TXT.</li> <li>\u041f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u0444\u0430\u0439\u043b\u0456\u0432 \u0432\u043a\u043b\u044e\u0447\u0430\u0454 \u0432\u0456\u0437\u0443\u0430\u043b\u044c\u043d\u0456 \u0435\u0444\u0435\u043a\u0442\u0438 (\u043d\u0430\u043f\u0440\u0438\u043a\u043b\u0430\u0434, Lightbox2).</li> </ol> </li> <li>\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u0456 \u0432\u0438\u0440\u0430\u0437\u0438:<ol> <li>\u041a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0456 \u0434\u043e\u0437\u0432\u043e\u043b\u0435\u043d\u0456 \u0442\u0435\u0433\u0438 HTML \u0443 \u0441\u0432\u043e\u0457\u0445 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f\u0445: <code>&lt;a href=\"\" title=\"\"&gt; &lt;/a&gt; &lt;code&gt; &lt;/code&gt; &lt;i&gt; &lt;/i&gt; &lt;strong&gt; &lt;/strong&gt;</code>.</li> <li>\u0406\u0441\u043d\u0443\u0454 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430, \u0449\u043e\u0431 \u0437\u0430\u0431\u0435\u0437\u043f\u0435\u0447\u0438\u0442\u0438 \u043d\u0430\u043b\u0435\u0436\u043d\u0435 \u0437\u0430\u043a\u0440\u0438\u0442\u0442\u044f \u0442\u0435\u0433\u0456\u0432.</li> </ol> </li> </ul>"},{"location":"#_4","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0456\u0457 \u0442\u0430 \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438","text":"<p>\u041f\u0440\u043e\u0435\u043a\u0442 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454 \u0442\u0430\u043a\u0456 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0456\u0457 \u0442\u0430 \u0456\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0438:</p> <ul> <li>Backend:<ul> <li>\u041c\u043e\u0432\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443\u0432\u0430\u043d\u043d\u044f Python (OOP);</li> <li>Django \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0437 django-simple-captcha \u0440\u043e\u0437\u0448\u0438\u0440\u0435\u043d\u043d\u044f\u043c;</li> <li>MySQL \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u0438\u0445 (Django ORM).</li> </ul> </li> <li>Frontend:<ul> <li>HTML &amp; CSS;</li> <li>JavaScript;</li> <li>Bootstrap 5.</li> </ul> </li> <li>Git \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044e \u0432\u0435\u0440\u0441\u0456\u0439.</li> </ul>"},{"location":"#_5","title":"\u0417\u043c\u0456\u043d\u043d\u0456 \u0441\u0435\u0440\u0435\u0434\u043e\u0432\u0438\u0449\u0430","text":"<p>\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0446\u044c\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0431\u0443\u0434\u0435 \u0434\u043e\u0434\u0430\u0442\u0438 \u0442\u0430\u043a\u0456 \u0437\u043c\u0456\u043d\u043d\u0456 \u0441\u0435\u0440\u0435\u0434\u043e\u0432\u0438\u0449\u0430:</p> <p><code>SECRET_KEY</code> <code>DB_HOST</code> <code>DB_NAME</code> <code>DB_USER</code> <code>DB_PASSWORD</code></p> <p>\u041f\u043e\u0434\u0438\u0432\u0456\u0442\u044c\u0441\u044f \u043d\u0430 file_env_example.txt</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>\u0429\u043e\u0431 \u0440\u043e\u0437\u043f\u043e\u0447\u0430\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442, \u0432\u0438\u043a\u043e\u043d\u0430\u0439\u0442\u0435 \u0446\u0456 \u043a\u0440\u043e\u043a\u0438:</p> <ol> <li> <p>\u041a\u043b\u043e\u043d\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442:     <code>git clone https://github.com/Gubchik123-NURE/Spa-comments.git</code></p> </li> <li> <p>\u041f\u0435\u0440\u0435\u0439\u0434\u0456\u0442\u044c \u0434\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443:</p> <p><code>cd Spa-comments</code></p> </li> <li> <p>\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u0456\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0456 \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456:     <code>pip install -r requirements.txt</code></p> </li> <li> <p>\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0439\u0442\u0435 \u0437\u0457\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0442\u0430 \u043a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u0457 \u0431\u0430\u0437\u0438 \u0434\u0430\u043d\u0438\u0445 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u043e \u0434\u043e \u0432\u0438\u0431\u0440\u0430\u043d\u043e\u0433\u043e \u0434\u0432\u0438\u0433\u0443\u043d\u0430 \u0411\u0414. \u0417\u0430\u0441\u0442\u043e\u0441\u0443\u0439\u0442\u0435 \u043c\u0456\u0433\u0440\u0430\u0446\u0456\u0457     <code>python manage.py migrate</code></p> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0456\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 \u0440\u043e\u0437\u0440\u043e\u0431\u043a\u0438 Django:     <code>python manage.py runserver</code></p> <p>\u041f\u0440\u0438\u043c\u0456\u0442\u043a\u0430: \u041d\u0435 \u0437\u0430\u0431\u0443\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e \u0437\u043c\u0456\u043d\u043d\u0456 \u0441\u0435\u0440\u0435\u0434\u043e\u0432\u0438\u0449\u0430</p> </li> <li> <p>\u0412\u0456\u0434\u043a\u0440\u0438\u0439\u0442\u0435 \u0441\u0432\u0456\u0439 \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0437\u0430 \u0430\u0434\u0440\u0435\u0441\u043e\u044e <code>http://127.0.0.1:8000</code> (\u0430\u0431\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0430 URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0456 \u0432\u0430\u0448\u043e\u0457 \u043a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u0457 Django).</p> </li> </ol>"},{"location":"#_6","title":"\u0412\u0438\u0441\u043d\u043e\u0432\u043e\u043a","text":"<p>\"Spa comments\" - \u0446\u0435 \u0432\u0435\u0431-\u0434\u043e\u0434\u0430\u0442\u043e\u043a, \u0431\u0430\u0433\u0430\u0442\u0438\u0439 \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u0457, \u043f\u043e\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0430 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e Django, JavaScript \u0442\u0430 MySQL. \u0426\u0435 \u0434\u043e\u0437\u0432\u043e\u043b\u044f\u0454 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430\u043c \u0437\u0430\u043b\u0438\u0448\u0430\u0442\u0438 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0437 \u0440\u0456\u0437\u043d\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u0437\u0430\u0431\u0435\u0437\u043f\u0435\u0447\u0443\u0454 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0443 \u0434\u0430\u043d\u0438\u0445 \u0442\u0430 \u0431\u0435\u0437\u043f\u0435\u043a\u0443? \u0442\u0430 \u0437\u0430\u0431\u0435\u0437\u043f\u0435\u0447\u0443\u0454 \u0437\u0440\u0443\u0447\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0456\u0432 \u0456\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0437 \u0456\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0438\u043c\u0438 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438.</p>"},{"location":"manage/","title":"manage.py","text":"<p>\u041a\u043e\u0436\u0435\u043d \u043f\u0440\u043e\u0435\u043a\u0442 Django \u043f\u043e\u0447\u0438\u043d\u0430\u0454 \u0440\u043e\u0431\u043e\u0442\u0443 \u0437 \u043c\u043e\u0434\u0443\u043b\u044e manage.py.  \u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u0438\u0445 \u0437\u0430\u0432\u0434\u0430\u043d\u044c, \u0442\u0430\u043a\u0438\u0445 \u044f\u043a \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u043e\u0437\u0440\u043e\u0431\u043a\u0438, \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043c\u0456\u0433\u0440\u0430\u0446\u0456\u0439, \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0441\u0443\u043f\u0435\u0440\u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0442\u0430 \u0456\u043d\u0448\u0456 \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f.</p> <p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0456\u044e main(), \u044f\u043a\u0430 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454\u0442\u044c\u0441\u044f, \u043a\u043e\u043b\u0438 \u0444\u0430\u0439\u043b manage.py \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0454\u0442\u044c\u0441\u044f \u044f\u043a \u0441\u043a\u0440\u0438\u043f\u0442.</p>"},{"location":"manage/#manage.main","title":"<code>main()</code>","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0454 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u0456 \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f.</p> Source code in <code>manage.py</code> <pre><code>def main():\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0454 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u0456 \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"spa.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n</code></pre>"},{"location":"comments/apps/","title":"apps.py","text":""},{"location":"comments/apps/#comments.apps.CommentsConfig","title":"<code>CommentsConfig</code>","text":"<p>             Bases: <code>AppConfig</code></p> <p>\u041a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u044f \u0434\u043b\u044f \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p> Source code in <code>comments\\apps.py</code> <pre><code>class CommentsConfig(AppConfig):\n    \"\"\"\u041a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u044f \u0434\u043b\u044f \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.\"\"\"\n\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"comments\"\n</code></pre>"},{"location":"comments/forms/","title":"forms.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u043e\u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0456\u0432 \u0444\u043e\u0440\u043c \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p>"},{"location":"comments/forms/#comments.forms.CommentModelForm","title":"<code>CommentModelForm</code>","text":"<p>             Bases: <code>ModelForm</code></p> <p>\u0424\u043e\u0440\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0456 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432 \u0434\u043b\u044f \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.</p> Source code in <code>comments\\forms.py</code> <pre><code>class CommentModelForm(forms.ModelForm):\n    \"\"\"\u0424\u043e\u0440\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0456 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432 \u0434\u043b\u044f \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.\"\"\"\n\n    username = forms.CharField(\n        max_length=100,\n        min_length=2,\n        required=True,\n        validators=[UnicodeUsernameValidator()],\n        widget=forms.TextInput(attrs=FIELD_WIDGET_ATTRS),\n    )\n    email = forms.EmailField(\n        required=True,\n        widget=forms.EmailInput(attrs=FIELD_WIDGET_ATTRS),\n    )\n    captcha = CaptchaField(widget=CaptchaTextInput(attrs=FIELD_WIDGET_ATTRS))\n\n    def save(\n        self,\n        comment_parent_id: str | None,\n        canvas_url: str | None,\n        commit=False,\n    ) -&gt; None:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430.\n\n        Args:\n            comment_parent_id (str): \u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.\n            canvas_url (str): URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0456 base64.\n            commit (bool): \u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0443 \u0431\u0430\u0437\u0456 \u0434\u0430\u043d\u0438\u0445.\n        \"\"\"\n        comment: Comment = super().save(commit)\n\n        if comment_parent_id and comment_parent_id.isdigit():\n            comment.parent = get_object_or_404(\n                Comment, id=int(comment_parent_id)\n            )\n        comment.author = self.get_author()\n\n        if canvas_url:\n            comment.file.save(\n                comment.file.name,\n                self.get_image_file_from_(canvas_url, comment.file.name),\n            )\n        comment.save()\n\n    def get_author(self) -&gt; Author:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430.\n\n        Returns:\n            \u0410\u0432\u0442\u043e\u0440: \u041d\u043e\u0432\u0438\u0439 \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u0438\u0439 \u0430\u0432\u0442\u043e\u0440.\n        \"\"\"\n        author, _ = Author.objects.get_or_create(\n            username=self.cleaned_data[\"username\"],\n            email=self.cleaned_data[\"email\"],\n        )\n        return author\n\n    def get_image_file_from_(\n        self, canvas_url: str, filename: str\n    ) -&gt; ContentFile:\n        \"\"\"Returns content file from decoded canvas_url.\"\"\"\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0444\u0430\u0439\u043b \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0437 \u0434\u0435\u043a\u043e\u0434\u043e\u0432\u0430\u043d\u043e\u0457 URL-\u0430\u0434\u0440\u0435\u0441\u0438 canvas_url.\n\n        Returns:\n            \u0424\u0430\u0439\u043b: \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f.\n        \"\"\"\n        image_data = canvas_url.split(\",\")[1]\n        return ContentFile(base64.b64decode(image_data), name=filename)\n\n    class Meta:\n        \"\"\"\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f CommentModelForm.\"\"\"\n\n        model = Comment\n        fields = (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\")\n        labels = {\n            \"home_page\": \"Home page (optional)\",\n            \"file\": \"Attached comment file (optional)\",\n        }\n        widgets = {\n            \"home_page\": forms.URLInput(attrs=FIELD_WIDGET_ATTRS),\n            \"text\": forms.Textarea(attrs=FIELD_WIDGET_ATTRS),\n            \"file\": forms.FileInput(\n                attrs={\n                    \"class\": \"form-control mb-1\",\n                    \"accept\": \".jpg, .jpeg, .gif, .png, .txt\",\n                }\n            ),\n        }\n</code></pre>"},{"location":"comments/forms/#comments.forms.CommentModelForm.Meta","title":"<code>Meta</code>","text":"<p>\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f CommentModelForm.</p> Source code in <code>comments\\forms.py</code> <pre><code>class Meta:\n    \"\"\"\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f CommentModelForm.\"\"\"\n\n    model = Comment\n    fields = (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\")\n    labels = {\n        \"home_page\": \"Home page (optional)\",\n        \"file\": \"Attached comment file (optional)\",\n    }\n    widgets = {\n        \"home_page\": forms.URLInput(attrs=FIELD_WIDGET_ATTRS),\n        \"text\": forms.Textarea(attrs=FIELD_WIDGET_ATTRS),\n        \"file\": forms.FileInput(\n            attrs={\n                \"class\": \"form-control mb-1\",\n                \"accept\": \".jpg, .jpeg, .gif, .png, .txt\",\n            }\n        ),\n    }\n</code></pre>"},{"location":"comments/forms/#comments.forms.CommentModelForm.save","title":"<code>save(comment_parent_id, canvas_url, commit=False)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>comment_parent_id</code> <code>str</code> <p>\u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.</p> required <code>canvas_url</code> <code>str</code> <p>URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0456 base64.</p> required <code>commit</code> <code>bool</code> <p>\u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0443 \u0431\u0430\u0437\u0456 \u0434\u0430\u043d\u0438\u0445.</p> <code>False</code> Source code in <code>comments\\forms.py</code> <pre><code>def save(\n    self,\n    comment_parent_id: str | None,\n    canvas_url: str | None,\n    commit=False,\n) -&gt; None:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430.\n\n    Args:\n        comment_parent_id (str): \u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.\n        canvas_url (str): URL-\u0430\u0434\u0440\u0435\u0441\u0430 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0456 base64.\n        commit (bool): \u0417\u0431\u0435\u0440\u0435\u0433\u0442\u0438 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0443 \u0431\u0430\u0437\u0456 \u0434\u0430\u043d\u0438\u0445.\n    \"\"\"\n    comment: Comment = super().save(commit)\n\n    if comment_parent_id and comment_parent_id.isdigit():\n        comment.parent = get_object_or_404(\n            Comment, id=int(comment_parent_id)\n        )\n    comment.author = self.get_author()\n\n    if canvas_url:\n        comment.file.save(\n            comment.file.name,\n            self.get_image_file_from_(canvas_url, comment.file.name),\n        )\n    comment.save()\n</code></pre>"},{"location":"comments/forms/#comments.forms.CommentModelForm.get_author","title":"<code>get_author()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430.</p> <p>Returns:</p> Name Type Description <code>\u0410\u0432\u0442\u043e\u0440</code> <code>Author</code> <p>\u041d\u043e\u0432\u0438\u0439 \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u0438\u0439 \u0430\u0432\u0442\u043e\u0440.</p> Source code in <code>comments\\forms.py</code> <pre><code>def get_author(self) -&gt; Author:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430.\n\n    Returns:\n        \u0410\u0432\u0442\u043e\u0440: \u041d\u043e\u0432\u0438\u0439 \u0430\u0431\u043e \u0456\u0441\u043d\u0443\u044e\u0447\u0438\u0439 \u0430\u0432\u0442\u043e\u0440.\n    \"\"\"\n    author, _ = Author.objects.get_or_create(\n        username=self.cleaned_data[\"username\"],\n        email=self.cleaned_data[\"email\"],\n    )\n    return author\n</code></pre>"},{"location":"comments/forms/#comments.forms.CommentModelForm.get_image_file_from_","title":"<code>get_image_file_from_(canvas_url, filename)</code>","text":"<p>Returns content file from decoded canvas_url.</p> Source code in <code>comments\\forms.py</code> <pre><code>def get_image_file_from_(\n    self, canvas_url: str, filename: str\n) -&gt; ContentFile:\n    \"\"\"Returns content file from decoded canvas_url.\"\"\"\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0444\u0430\u0439\u043b \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0437 \u0434\u0435\u043a\u043e\u0434\u043e\u0432\u0430\u043d\u043e\u0457 URL-\u0430\u0434\u0440\u0435\u0441\u0438 canvas_url.\n\n    Returns:\n        \u0424\u0430\u0439\u043b: \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f.\n    \"\"\"\n    image_data = canvas_url.split(\",\")[1]\n    return ContentFile(base64.b64decode(image_data), name=filename)\n</code></pre>"},{"location":"comments/models/","title":"models.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u043e\u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p>"},{"location":"comments/models/#comments.models.Author","title":"<code>Author</code>","text":"<p>             Bases: <code>Model</code></p> <p>\u041c\u043e\u0434\u0435\u043b\u044c, \u0449\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454 \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\models.py</code> <pre><code>class Author(models.Model):\n    \"\"\"\u041c\u043e\u0434\u0435\u043b\u044c, \u0449\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454 \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    username = models.CharField(\n        max_length=100,\n        unique=False,\n        blank=False,\n        null=False,\n        verbose_name=\"Username\",\n    )\n    email = models.EmailField(\n        unique=False, blank=False, null=False, verbose_name=\"Email address\"\n    )\n\n    def __str__(self) -&gt; str:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0430\u0433\u0456\u0447\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0456\u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\n\n        Returns:\n            \u0440\u044f\u0434\u043e\u043a: \u043d\u0456\u043a\u043d\u0435\u0439\u043c \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.\n        \"\"\"\n        return self.username\n\n    class Meta:\n        \"\"\"\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0456\u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n        ordering = [\"username\"]\n        verbose_name = \"Comment author\"\n        verbose_name_plural = \"Comment authors\"\n</code></pre>"},{"location":"comments/models/#comments.models.Author.Meta","title":"<code>Meta</code>","text":"<p>\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0456\u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\models.py</code> <pre><code>class Meta:\n    \"\"\"\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0456\u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    ordering = [\"username\"]\n    verbose_name = \"Comment author\"\n    verbose_name_plural = \"Comment authors\"\n</code></pre>"},{"location":"comments/models/#comments.models.Author.__str__","title":"<code>__str__()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0430\u0433\u0456\u0447\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0456\u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> <p>Returns:</p> Name Type Description <code>\u0440\u044f\u0434\u043e\u043a</code> <code>str</code> <p>\u043d\u0456\u043a\u043d\u0435\u0439\u043c \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.</p> Source code in <code>comments\\models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0430\u0433\u0456\u0447\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0456\u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\n\n    Returns:\n        \u0440\u044f\u0434\u043e\u043a: \u043d\u0456\u043a\u043d\u0435\u0439\u043c \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.\n    \"\"\"\n    return self.username\n</code></pre>"},{"location":"comments/models/#comments.models.Comment","title":"<code>Comment</code>","text":"<p>             Bases: <code>Model</code></p> <p>\u041c\u043e\u0434\u0435\u043b\u044c, \u0449\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440.</p> Source code in <code>comments\\models.py</code> <pre><code>class Comment(models.Model):\n    \"\"\"\u041c\u043e\u0434\u0435\u043b\u044c, \u0449\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440.\"\"\"\n\n    home_page = models.URLField(\n        blank=True, null=True, verbose_name=\"Home page\"\n    )\n    text = models.TextField(\n        blank=False, null=False, verbose_name=\"Comment body\"\n    )\n    file = models.FileField(\n        upload_to=\"comment_files/\",\n        blank=True,\n        null=True,\n        verbose_name=\"Attached comment file\",\n    )\n    created = models.DateTimeField(\n        auto_now_add=True, verbose_name=\"Created datetime\"\n    )\n\n    parent = models.ForeignKey(\n        \"self\",\n        null=True,\n        blank=True,\n        default=None,\n        on_delete=models.CASCADE,\n        verbose_name=\"Parent comment\",\n    )\n\n    author = models.ForeignKey(\n        Author, on_delete=models.CASCADE, verbose_name=\"Comment author\"\n    )\n\n    objects = _CommentCustomManager()\n\n    def __str__(self) -&gt; str:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0430\u0433\u0456\u0447\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\n\n        Returns:\n            \u0440\u044f\u0434\u043e\u043a: \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u0439 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f \u0442\u0430 \u0430\u0432\u0442\u043e\u0440\u0430.\n        \"\"\"\n        return f\"{self.pk} from {self.author}\"\n\n    class Meta:\n        \"\"\"\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n        ordering = [\"-created\"]\n        verbose_name = \"Comment\"\n        verbose_name_plural = \"Comments\"\n</code></pre>"},{"location":"comments/models/#comments.models.Comment.Meta","title":"<code>Meta</code>","text":"<p>\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\models.py</code> <pre><code>class Meta:\n    \"\"\"\u041c\u0435\u0442\u0430-\u043e\u043f\u0446\u0456\u0457 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    ordering = [\"-created\"]\n    verbose_name = \"Comment\"\n    verbose_name_plural = \"Comments\"\n</code></pre>"},{"location":"comments/models/#comments.models.Comment.__str__","title":"<code>__str__()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0430\u0433\u0456\u0447\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> <p>Returns:</p> Name Type Description <code>\u0440\u044f\u0434\u043e\u043a</code> <code>str</code> <p>\u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u0439 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f \u0442\u0430 \u0430\u0432\u0442\u043e\u0440\u0430.</p> Source code in <code>comments\\models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0430\u0433\u0456\u0447\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\n\n    Returns:\n        \u0440\u044f\u0434\u043e\u043a: \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u0439 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f \u0442\u0430 \u0430\u0432\u0442\u043e\u0440\u0430.\n    \"\"\"\n    return f\"{self.pk} from {self.author}\"\n</code></pre>"},{"location":"comments/services/","title":"services.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u043e\u0437\u043f\u043e\u0434\u0456\u043b\u0443 \u0431\u0456\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0456\u043a\u0438 \u043c\u0456\u0436 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438.</p>"},{"location":"comments/services/#comments.services.get_ordering_string","title":"<code>get_ordering_string(order_by, order_dir)</code>","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None \u043f\u0456\u0441\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0438\u0445 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432.</p> <p>Parameters:</p> Name Type Description Default <code>order_by</code> <code>str</code> <p>\u041f\u043e\u043b\u0435, \u0437\u0430 \u044f\u043a\u0438\u043c \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> required <code>order_dir</code> <code>str</code> <p>\u041d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: \u0420\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None.</p> Source code in <code>comments\\services.py</code> <pre><code>def get_ordering_string(order_by: str, order_dir: str) -&gt; str | None:\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None \u043f\u0456\u0441\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0438\u0445 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432.\n\n    Args:\n        order_by (str): \u041f\u043e\u043b\u0435, \u0437\u0430 \u044f\u043a\u0438\u043c \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\n        order_dir (str): \u041d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\n\n    Returns:\n        str | None: \u0420\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None.\n    \"\"\"\n    if are_ordering_parameters_valid(order_by, order_dir):\n        return get_order_symbol_by_(order_dir) + get_correct_(order_by)\n    return None\n</code></pre>"},{"location":"comments/services/#comments.services.are_ordering_parameters_valid","title":"<code>are_ordering_parameters_valid(order_by, order_dir)</code>","text":"<p>Checks if the given order_by and order_dir are valid.</p> Source code in <code>comments\\services.py</code> <pre><code>def are_ordering_parameters_valid(order_by: str, order_dir: str) -&gt; bool:\n    \"\"\"Checks if the given order_by and order_dir are valid.\"\"\"\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0432\u0430\u043b\u0456\u0434\u043d\u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 order_by \u0442\u0430 order_dir.\n\n    Args:\n        order_by (str): \u041f\u043e\u043b\u0435, \u0437\u0430 \u044f\u043a\u0438\u043c \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\n        order_dir (str): \u041d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.    \n\n    Returns:\n        bool: \u0427\u0438 \u0432\u0430\u043b\u0456\u0434\u043d\u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438.\n    \"\"\"\n    if (order_dir not in (\"asc\", \"desc\")) or (order_by not in (\"u\", \"e\", \"c\")):\n        return False\n    return True\n</code></pre>"},{"location":"comments/services/#comments.services.get_order_symbol_by_","title":"<code>get_order_symbol_by_(order_dir)</code>","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0438\u043c\u0432\u043e\u043b \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f Django (\u0442\u0438\u0440\u0435 \u0430\u0431\u043e \u043f\u043e\u0440\u043e\u0436\u043d\u0456\u0439 \u0440\u044f\u0434\u043e\u043a).</p> <p>Parameters:</p> Name Type Description Default <code>order_dir</code> <code>str</code> <p>\u041d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u0421\u0438\u043c\u0432\u043e\u043b \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> Source code in <code>comments\\services.py</code> <pre><code>def get_order_symbol_by_(order_dir: str) -&gt; str:\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0438\u043c\u0432\u043e\u043b \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f Django (\u0442\u0438\u0440\u0435 \u0430\u0431\u043e \u043f\u043e\u0440\u043e\u0436\u043d\u0456\u0439 \u0440\u044f\u0434\u043e\u043a).\n\n    Args:\n        order_dir (str): \u041d\u0430\u043f\u0440\u044f\u043c\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\n\n    Returns:\n        str: \u0421\u0438\u043c\u0432\u043e\u043b \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\n    \"\"\"\n    return \"-\" if order_dir == \"desc\" else \"\"\n</code></pre>"},{"location":"comments/services/#comments.services.get_correct_","title":"<code>get_correct_(order_by)</code>","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0435 \u0456\u043c'\u044f \u043f\u043e\u043b\u044f \u0437\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0438\u043c (\u043e\u0434\u043d\u043e\u043b\u0456\u0442\u0435\u0440\u043d\u0438\u043c) order_by.</p> <p>Parameters:</p> Name Type Description Default <code>order_by</code> <code>str</code> <p>\u041f\u043e\u043b\u0435, \u0437\u0430 \u044f\u043a\u0438\u043c \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0435 \u0456\u043c'\u044f \u043f\u043e\u043b\u044f.</p> Source code in <code>comments\\services.py</code> <pre><code>def get_correct_(order_by: str) -&gt; str:\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0435 \u0456\u043c'\u044f \u043f\u043e\u043b\u044f \u0437\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0438\u043c (\u043e\u0434\u043d\u043e\u043b\u0456\u0442\u0435\u0440\u043d\u0438\u043c) order_by.\n\n    Args:\n        order_by (str): \u041f\u043e\u043b\u0435, \u0437\u0430 \u044f\u043a\u0438\u043c \u0432\u0456\u0434\u0431\u0443\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\n\n    Returns:\n        str: \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0435 \u0456\u043c'\u044f \u043f\u043e\u043b\u044f.\n    \"\"\"\n    fields = {\"u\": \"author__username\", \"e\": \"author__email\", \"c\": \"created\"}\n    return fields[order_by]\n</code></pre>"},{"location":"comments/urls/","title":"urls.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0448\u043b\u044f\u0445\u0438 \u0434\u043b\u044f \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p> <pre><code>urlpatterns = [\n    path(\"\", views.CommentListView.as_view(), name=\"list\"),\n    path(\"add/\", views.CommentCreateView.as_view(), name=\"add\"),\n]\n</code></pre>"},{"location":"comments/views/","title":"views.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u043e\u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044c \u0434\u043e\u0434\u0430\u0442\u043a\u0443 \"comments\".</p>"},{"location":"comments/views/#comments.views.CommentListView","title":"<code>CommentListView</code>","text":"<p>             Bases: <code>BaseView</code>, <code>ListView</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\views.py</code> <pre><code>class CommentListView(BaseView, generic.ListView):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0432\u0456\u0434\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0432\u0441\u0456\u0445 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    paginate_by = 25\n    queryset = Comment.objects.all().filter(parent_id__isnull=True)\n\n    def get(\n        self, request: http.HttpRequest, *args: Any, **kwargs: Any\n    ) -&gt; http.HttpResponse | NoReturn:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0442\u0430 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u043c\u0435\u0442\u043e\u0434 get \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0443.\n\n        Raises:\n            404: \u042f\u043a\u0449\u043e \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439.\n\n        Returns:\n            get: \u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.\n        \"\"\"\n        if self.get_ordering() is None:\n            raise http.Http404\n        return super().get(request, *args, **kwargs)\n\n    def get_ordering(self) -&gt; str | None:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None \u0437\u0430 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438.\n\n        Returns:\n            get_ordering_string: \u0420\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None.\n        \"\"\"\n        return services.get_ordering_string(\n            self.request.GET.get(\"orderby\") or \"c\",\n            self.request.GET.get(\"orderdir\") or \"desc\",\n        )\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0434\u0430\u0454 \u0444\u043e\u0440\u043c\u0443 \u0434\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0439\u043e\u0433\u043e.\n\n        Returns:\n            context: \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f.\n        \"\"\"\n        global FORM_DATA\n        context = super().get_context_data(**kwargs)\n        context[\"form\"] = CommentModelForm(FORM_DATA or None)\n        FORM_DATA = {}\n        return context\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView.get","title":"<code>get(request, *args, **kwargs)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0442\u0430 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u043c\u0435\u0442\u043e\u0434 get \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0443.</p> <p>Raises:</p> Type Description <code>404</code> <p>\u042f\u043a\u0449\u043e \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439.</p> <p>Returns:</p> Name Type Description <code>get</code> <code>HttpResponse | NoReturn</code> <p>\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.</p> Source code in <code>comments\\views.py</code> <pre><code>def get(\n    self, request: http.HttpRequest, *args: Any, **kwargs: Any\n) -&gt; http.HttpResponse | NoReturn:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0442\u0430 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u043c\u0435\u0442\u043e\u0434 get \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0443.\n\n    Raises:\n        404: \u042f\u043a\u0449\u043e \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439.\n\n    Returns:\n        get: \u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.\n    \"\"\"\n    if self.get_ordering() is None:\n        raise http.Http404\n    return super().get(request, *args, **kwargs)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView.get_ordering","title":"<code>get_ordering()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None \u0437\u0430 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438.</p> <p>Returns:</p> Name Type Description <code>get_ordering_string</code> <code>str | None</code> <p>\u0420\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None.</p> Source code in <code>comments\\views.py</code> <pre><code>def get_ordering(self) -&gt; str | None:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None \u0437\u0430 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438.\n\n    Returns:\n        get_ordering_string: \u0420\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0431\u043e None.\n    \"\"\"\n    return services.get_ordering_string(\n        self.request.GET.get(\"orderby\") or \"c\",\n        self.request.GET.get(\"orderdir\") or \"desc\",\n    )\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0434\u0430\u0454 \u0444\u043e\u0440\u043c\u0443 \u0434\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0439\u043e\u0433\u043e.</p> <p>Returns:</p> Name Type Description <code>context</code> <code>dict[str, Any]</code> <p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f.</p> Source code in <code>comments\\views.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0434\u0430\u0454 \u0444\u043e\u0440\u043c\u0443 \u0434\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0439\u043e\u0433\u043e.\n\n    Returns:\n        context: \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f.\n    \"\"\"\n    global FORM_DATA\n    context = super().get_context_data(**kwargs)\n    context[\"form\"] = CommentModelForm(FORM_DATA or None)\n    FORM_DATA = {}\n    return context\n</code></pre>"},{"location":"comments/views/#comments.views.CommentCreateView","title":"<code>CommentCreateView</code>","text":"<p>             Bases: <code>BaseView</code>, <code>CreateView</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430\u043f\u0438\u0442\u0443 POST \u0442\u0430 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.</p> Source code in <code>comments\\views.py</code> <pre><code>class CommentCreateView(BaseView, generic.CreateView):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430\u043f\u0438\u0442\u0443 POST \u0442\u0430 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f.\"\"\"\n\n    model = Comment\n    success_url = \"/\"\n    http_method_names = [\"post\"]\n    form_class = CommentModelForm\n\n    def form_valid(self, form: CommentModelForm) -&gt; http.HttpResponseRedirect:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0444\u043e\u0440\u043c\u0443, \u0434\u043e\u0434\u0430\u0454 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u0443\u0441\u043f\u0456\u0445 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n\n        Args:\n            form (CommentModelForm): \u0412\u0430\u043b\u0456\u0434\u043d\u0430 \u0444\u043e\u0440\u043c\u0430.\n\n        Returns:\n            success_url: \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n        \"\"\"\n        comment_parent_id = self.request.POST.get(\"comment_parent_id\", None)\n        canvas_url = self.request.POST.get(\"resized_image\", None)\n        form.save(comment_parent_id, canvas_url)\n\n        s = \"comment\" if not comment_parent_id else \"answer\"\n        messages.success(self.request, f\"Your {s} has successfully added.\")\n        return http.HttpResponseRedirect(self.success_url)\n\n    def form_invalid(\n        self, form: CommentModelForm\n    ) -&gt; http.HttpResponseRedirect:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0434\u0430\u0454 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n\n        Args:\n            form (CommentModelForm): \u041d\u0435\u0432\u0430\u043b\u0456\u0434\u043d\u0430 \u0444\u043e\u0440\u043c\u0430.\n\n        Returns:\n            success_url: \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n        \"\"\"\n        global FORM_DATA\n        FORM_DATA = self.request.POST\n\n        messages.error(self.request, \"Invalid form data.\")\n        return http.HttpResponseRedirect(self.success_url)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0444\u043e\u0440\u043c\u0443, \u0434\u043e\u0434\u0430\u0454 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u0443\u0441\u043f\u0456\u0445 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>CommentModelForm</code> <p>\u0412\u0430\u043b\u0456\u0434\u043d\u0430 \u0444\u043e\u0440\u043c\u0430.</p> required <p>Returns:</p> Name Type Description <code>success_url</code> <code>HttpResponseRedirect</code> <p>\u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.</p> Source code in <code>comments\\views.py</code> <pre><code>def form_valid(self, form: CommentModelForm) -&gt; http.HttpResponseRedirect:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0444\u043e\u0440\u043c\u0443, \u0434\u043e\u0434\u0430\u0454 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u0443\u0441\u043f\u0456\u0445 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n\n    Args:\n        form (CommentModelForm): \u0412\u0430\u043b\u0456\u0434\u043d\u0430 \u0444\u043e\u0440\u043c\u0430.\n\n    Returns:\n        success_url: \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n    \"\"\"\n    comment_parent_id = self.request.POST.get(\"comment_parent_id\", None)\n    canvas_url = self.request.POST.get(\"resized_image\", None)\n    form.save(comment_parent_id, canvas_url)\n\n    s = \"comment\" if not comment_parent_id else \"answer\"\n    messages.success(self.request, f\"Your {s} has successfully added.\")\n    return http.HttpResponseRedirect(self.success_url)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentCreateView.form_invalid","title":"<code>form_invalid(form)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0434\u0430\u0454 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>CommentModelForm</code> <p>\u041d\u0435\u0432\u0430\u043b\u0456\u0434\u043d\u0430 \u0444\u043e\u0440\u043c\u0430.</p> required <p>Returns:</p> Name Type Description <code>success_url</code> <code>HttpResponseRedirect</code> <p>\u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.</p> Source code in <code>comments\\views.py</code> <pre><code>def form_invalid(\n    self, form: CommentModelForm\n) -&gt; http.HttpResponseRedirect:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043e\u0434\u0430\u0454 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u044f \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443 \u0442\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n\n    Args:\n        form (CommentModelForm): \u041d\u0435\u0432\u0430\u043b\u0456\u0434\u043d\u0430 \u0444\u043e\u0440\u043c\u0430.\n\n    Returns:\n        success_url: \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043d\u0430 success_url.\n    \"\"\"\n    global FORM_DATA\n    FORM_DATA = self.request.POST\n\n    messages.error(self.request, \"Invalid form data.\")\n    return http.HttpResponseRedirect(self.success_url)\n</code></pre>"},{"location":"comments/tests/test_forms/","title":"test_forms.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u0444\u043e\u0440\u043c \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase","title":"<code>CommentModelFormSimpleTestCase</code>","text":"<p>             Bases: <code>SimpleTestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CommentModelForm.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>class CommentModelFormSimpleTestCase(SimpleTestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CommentModelForm.\"\"\"\n\n    @classmethod\n    def setUpClass(cls) -&gt; None:\n        \"\"\"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0439\u0442\u0435 CommentModelform \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\"\"\"\n        super().setUpClass()\n        cls.form = CommentModelForm()\n\n    # * ---------- Testing the meta options of the CommentModelForm -----------\n\n    def test_form_model(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u043e\u0434\u0435\u043b\u044c \u0444\u043e\u0440\u043c\u0438.\"\"\"\n        self.assertEqual(self.form._meta.model, Comment)\n\n    def test_form_fields(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043f\u043e\u043b\u044f \u0444\u043e\u0440\u043c\u0438.\"\"\"\n        self.assertEqual(\n            tuple(self.form._meta.fields),\n            (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\"),\n        )\n\n    def test_home_page_label(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0435\u0442\u0438\u043a\u0435\u0442\u043a\u0443 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"home_page\"].label, \"Home page (optional)\"\n        )\n\n    def test_file_label(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u0456\u0442\u043a\u0443 \u0444\u0430\u0439\u043b\u0443.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"file\"].label, \"Attached comment file (optional)\"\n        )\n\n    def test_home_page_widget(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"home_page\"].widget, forms.URLInput\n        )\n\n    def test_home_page_widget_attrs_class(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    def test_text_widget(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0438\u0439 \u0432\u0456\u0434\u0436\u0435\u0442.\"\"\"\n        self.assertIsInstance(self.form.fields[\"text\"].widget, forms.Textarea)\n\n    def test_text_widget_attrs_class(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    def test_file_widget(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0444\u0430\u0439\u043b\u0443.\"\"\"\n        self.assertIsInstance(self.form.fields[\"file\"].widget, forms.FileInput)\n\n    def test_file_widget_attrs_class(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0444\u0430\u0439\u043b\u0456\u0432.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"file\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    def test_file_widget_attrs_accept(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0424\u0430\u0439\u043b \u043f\u0440\u0438\u0439\u043c\u0430\u044e\u0442\u044c.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"file\"].widget.attrs[\"accept\"],\n            \".jpg, .jpeg, .gif, .png, .txt\",\n        )\n\n    # * ---------------- Test the 'username' field parameters -----------------\n\n    def test_username_max_length(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n        self.assertEqual(self.form.fields[\"username\"].max_length, 100)\n\n    def test_username_min_length(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n        self.assertEqual(self.form.fields[\"username\"].min_length, 2)\n\n    def test_username_required(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n        self.assertTrue(self.form.fields[\"username\"].required)\n\n    def test_username_validator(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0430\u043b\u0456\u0434\u0430\u0442\u043e\u0440 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"username\"].validators[0],\n            UnicodeUsernameValidator,\n        )\n\n    def test_username_widget(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"username\"].widget, forms.TextInput\n        )\n\n    def test_username_widget_attrs_class(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"username\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    # * ---------------- Test the 'email' field parameters --------------------\n\n    def test_email_required(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0438\u0439 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0438\u0439 \u043b\u0438\u0441\u0442.\"\"\"\n        self.assertTrue(self.form.fields[\"email\"].required)\n\n    def test_email_widget(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"email\"].widget,\n            forms.EmailInput,\n        )\n\n    def test_email_widget_attrs_class(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"email\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    # * ---------------- Test the 'captcha' field parameters ------------------\n\n    def test_captcha_widget(self):\n        \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 Captcha.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"captcha\"].widget, CaptchaTextInput\n        )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.setUpClass","title":"<code>setUpClass()</code>  <code>classmethod</code>","text":"<p>\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0439\u0442\u0435 CommentModelform \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>@classmethod\ndef setUpClass(cls) -&gt; None:\n    \"\"\"\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0439\u0442\u0435 CommentModelform \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\"\"\"\n    super().setUpClass()\n    cls.form = CommentModelForm()\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_form_model","title":"<code>test_form_model()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u043e\u0434\u0435\u043b\u044c \u0444\u043e\u0440\u043c\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_form_model(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u043e\u0434\u0435\u043b\u044c \u0444\u043e\u0440\u043c\u0438.\"\"\"\n    self.assertEqual(self.form._meta.model, Comment)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_form_fields","title":"<code>test_form_fields()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043f\u043e\u043b\u044f \u0444\u043e\u0440\u043c\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_form_fields(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043f\u043e\u043b\u044f \u0444\u043e\u0440\u043c\u0438.\"\"\"\n    self.assertEqual(\n        tuple(self.form._meta.fields),\n        (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\"),\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_home_page_label","title":"<code>test_home_page_label()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0435\u0442\u0438\u043a\u0435\u0442\u043a\u0443 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_home_page_label(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0435\u0442\u0438\u043a\u0435\u0442\u043a\u0443 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"home_page\"].label, \"Home page (optional)\"\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_label","title":"<code>test_file_label()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u0456\u0442\u043a\u0443 \u0444\u0430\u0439\u043b\u0443.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_label(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u0456\u0442\u043a\u0443 \u0444\u0430\u0439\u043b\u0443.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"file\"].label, \"Attached comment file (optional)\"\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_home_page_widget","title":"<code>test_home_page_widget()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_home_page_widget(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"home_page\"].widget, forms.URLInput\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_home_page_widget_attrs_class","title":"<code>test_home_page_widget_attrs_class()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_home_page_widget_attrs_class(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_text_widget","title":"<code>test_text_widget()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0438\u0439 \u0432\u0456\u0434\u0436\u0435\u0442.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_text_widget(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0438\u0439 \u0432\u0456\u0434\u0436\u0435\u0442.\"\"\"\n    self.assertIsInstance(self.form.fields[\"text\"].widget, forms.Textarea)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_text_widget_attrs_class","title":"<code>test_text_widget_attrs_class()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_text_widget_attrs_class(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u044c\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_widget","title":"<code>test_file_widget()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0444\u0430\u0439\u043b\u0443.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_widget(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0444\u0430\u0439\u043b\u0443.\"\"\"\n    self.assertIsInstance(self.form.fields[\"file\"].widget, forms.FileInput)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_widget_attrs_class","title":"<code>test_file_widget_attrs_class()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0444\u0430\u0439\u043b\u0456\u0432.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_widget_attrs_class(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0444\u0430\u0439\u043b\u0456\u0432.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"file\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_widget_attrs_accept","title":"<code>test_file_widget_attrs_accept()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0424\u0430\u0439\u043b \u043f\u0440\u0438\u0439\u043c\u0430\u044e\u0442\u044c.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_widget_attrs_accept(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0424\u0430\u0439\u043b \u043f\u0440\u0438\u0439\u043c\u0430\u044e\u0442\u044c.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"file\"].widget.attrs[\"accept\"],\n        \".jpg, .jpeg, .gif, .png, .txt\",\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_max_length","title":"<code>test_username_max_length()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_max_length(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n    self.assertEqual(self.form.fields[\"username\"].max_length, 100)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_min_length","title":"<code>test_username_min_length()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_min_length(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0434\u043e\u0432\u0436\u0438\u043d\u0443 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n    self.assertEqual(self.form.fields[\"username\"].min_length, 2)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_required","title":"<code>test_username_required()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_required(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0435 \u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n    self.assertTrue(self.form.fields[\"username\"].required)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_validator","title":"<code>test_username_validator()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0430\u043b\u0456\u0434\u0430\u0442\u043e\u0440 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_validator(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0430\u043b\u0456\u0434\u0430\u0442\u043e\u0440 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"username\"].validators[0],\n        UnicodeUsernameValidator,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_widget","title":"<code>test_username_widget()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_widget(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"username\"].widget, forms.TextInput\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_widget_attrs_class","title":"<code>test_username_widget_attrs_class()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_widget_attrs_class(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"username\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_email_required","title":"<code>test_email_required()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0438\u0439 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0438\u0439 \u043b\u0438\u0441\u0442.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_email_required(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u0438\u0439 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0438\u0439 \u043b\u0438\u0441\u0442.\"\"\"\n    self.assertTrue(self.form.fields[\"email\"].required)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_email_widget","title":"<code>test_email_widget()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_email_widget(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"email\"].widget,\n        forms.EmailInput,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_email_widget_attrs_class","title":"<code>test_email_widget_attrs_class()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_email_widget_attrs_class(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043e\u043d\u0443\u0454 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u043a\u043b\u0430\u0441\u0443 \u0430\u0442\u0440\u0438\u043d\u0442\u0456\u0432 \u0432\u0456\u0434\u0436\u0435\u0442\u0456\u0432 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"email\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_captcha_widget","title":"<code>test_captcha_widget()</code>","text":"<p>\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 Captcha.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_captcha_widget(self):\n    \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454 \u0432\u0456\u0434\u0436\u0435\u0442 Captcha.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"captcha\"].widget, CaptchaTextInput\n    )\n</code></pre>"},{"location":"comments/tests/test_models/","title":"test_models.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase","title":"<code>AuthorModelTestCase</code>","text":"<p>             Bases: <code>_ModelMetaOptionsTestMixin</code>, <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0430.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>class AuthorModelTestCase(_ModelMetaOptionsTestMixin, TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0430\u0432\u0442\u043e\u0440\u0430.\"\"\"\n\n    model = Author\n    ordering = [\"username\"]\n    verbose_name = \"Comment author\"\n    verbose_name_plural = \"Comment authors\"\n\n    @classmethod\n    def setUpTestData(cls) -&gt; None:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\"\"\"\n        Author.objects.create(username=\"test_user\", email=\"test@gmail.com\")\n\n    def test_model_string_representation(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e __str__.\"\"\"\n        obj = self.model.objects.first()\n        self.assertEqual(str(obj), obj.username)\n\n    # * ---------------- Test the 'username' field parameters -----------------\n\n    def test_username_max_length(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043c\u0430\u0454 max_length = 100.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"username\").max_length, 100\n        )\n\n    def test_username_unique(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0454 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u043c = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"username\").unique)\n\n    def test_username_blank(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"username\").blank)\n\n    def test_username_null(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0454 null = false.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"username\").null)\n\n    def test_username_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043c\u0430\u0454 verbose_name = '\u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"username\").verbose_name, \"Username\"\n        )\n\n    # * ----------------- Test the 'email' field parameters -------------------\n\n    def test_email_unique(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u0454 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u043c = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"email\").unique)\n\n    def test_email_blank(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"email\").blank)\n\n    def test_email_null(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 null = false.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"email\").null)\n\n    def test_email_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u043c\u0430\u0454 verbose_name = '\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"email\").verbose_name, \"Email address\"\n        )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.setUpTestData","title":"<code>setUpTestData()</code>  <code>classmethod</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls) -&gt; None:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0435\u0440\u0448\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\"\"\"\n    Author.objects.create(username=\"test_user\", email=\"test@gmail.com\")\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_model_string_representation","title":"<code>test_model_string_representation()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e str.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_model_string_representation(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e __str__.\"\"\"\n    obj = self.model.objects.first()\n    self.assertEqual(str(obj), obj.username)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_max_length","title":"<code>test_username_max_length()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043c\u0430\u0454 max_length = 100.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_max_length(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043c\u0430\u0454 max_length = 100.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"username\").max_length, 100\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_unique","title":"<code>test_username_unique()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0454 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u043c = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_unique(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0454 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u043c = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"username\").unique)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_blank","title":"<code>test_username_blank()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_blank(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"username\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_null","title":"<code>test_username_null()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0454 null = false.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_null(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0454 null = false.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"username\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_verbose_name","title":"<code>test_username_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043c\u0430\u0454 verbose_name = '\u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0456\u043c\u0435\u043d\u0456 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u043c\u0430\u0454 verbose_name = '\u0456\u043c'\u044f \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"username\").verbose_name, \"Username\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_unique","title":"<code>test_email_unique()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u0454 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u043c = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_unique(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u0454 \u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u043c = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"email\").unique)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_blank","title":"<code>test_email_blank()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_blank(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"email\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_null","title":"<code>test_email_null()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 null = false.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_null(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 null = false.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"email\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_verbose_name","title":"<code>test_email_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u043c\u0430\u0454 verbose_name = '\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438 \u043c\u0430\u0454 verbose_name = '\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0457 \u043f\u043e\u0448\u0442\u0438'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"email\").verbose_name, \"Email address\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase","title":"<code>CommentModelTestCase</code>","text":"<p>             Bases: <code>_ModelMetaOptionsTestMixin</code>, <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>class CommentModelTestCase(_ModelMetaOptionsTestMixin, TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    model = Comment\n    ordering = [\"-created\"]\n    verbose_name = \"Comment\"\n    verbose_name_plural = \"Comments\"\n\n    @classmethod\n    def setUpTestData(cls) -&gt; None:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0435\u0440\u0448\u0438\u0439 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\"\"\"\n        cls.author = Author.objects.create(\n            username=\"test_user\", email=\"test@gmail.com\"\n        )\n        Comment.objects.create(\n            text=\"test comment\", author=cls.author, parent=None\n        )\n\n    def test_model_string_representation(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e __str__.\"\"\"\n        obj = self.model.objects.first()\n        self.assertEqual(str(obj), f\"{obj.pk} from {obj.author}\")\n\n    # * ---------------- Test the 'home_page' field parameters ----------------\n\n    def test_home_page_blank(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"home_page\").blank)\n\n    def test_home_page_null(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u0454 null = true.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"home_page\").null)\n\n    def test_home_page_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u043c\u0430\u0454 verbose_name = '\u0434\u043e\u043c\u0430\u0448\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"home_page\").verbose_name, \"Home page\"\n        )\n\n    # * ---------------- Test the 'text' field parameters ---------------------\n\n    def test_text_blank(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"text\").blank)\n\n    def test_text_null(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u0454 null = false.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"text\").null)\n\n    def test_text_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = 'body comment'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"text\").verbose_name, \"Comment body\"\n        )\n\n    # * ----------------- Test the 'file' field parameters --------------------\n\n    def test_file_upload_to(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u0454 upload_to = 'comment_files/'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"file\").upload_to, \"comment_files/\"\n        )\n\n    def test_file_blank(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"file\").blank)\n\n    def test_file_null(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u0454 null = true.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"file\").null)\n\n    def test_file_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u0454 verbose_name = '\u0434\u043e\u0434\u0430\u043d\u0438\u0439 \u0444\u0430\u0439\u043b \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"file\").verbose_name,\n            \"Attached comment file\",\n        )\n\n    # * ---------------- Test the 'created' field parameters ------------------\n\n    def test_created_auto_now_add(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 auto_now_add = true.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"created\").auto_now_add)\n\n    def test_created_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = '\u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u0439 dateTime'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"created\").verbose_name,\n            \"Created datetime\",\n        )\n\n    # * ---------------- Test the 'parent' field parameters -------------------\n\n    def test_parent_null(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u0454 null = true.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"parent\").null)\n\n    def test_parent_blank(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"parent\").blank)\n\n    def test_parent_default(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c = \u043d\u0435\u043c\u0430\u0454.\"\"\"\n        self.assertIsNone(self.model._meta.get_field(\"parent\").default)\n\n    def test_parent_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = '\u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0438\u0439 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"parent\").verbose_name, \"Parent comment\"\n        )\n\n    def test_parent_on_delete(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 on_delete \u0454 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u043c.\"\"\"\n        Comment.objects.get(id=1).delete()\n        with self.assertRaises(Comment.DoesNotExist):\n            Comment.objects.get(id=1)\n\n    # * ---------------- Test the 'author' field parameters -------------------\n\n    def test_author_verbose_name(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0430\u0432\u0442\u043e\u0440\u0430 \u043c\u0430\u0454 verbose_name = '\u0430\u0432\u0442\u043e\u0440 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"author\").verbose_name, \"Comment author\"\n        )\n\n    def test_author_on_delete(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0430\u0432\u0442\u043e\u0440\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 on_delete \u0454 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u043c.\"\"\"\n        Comment.objects.get(id=1).delete()\n        with self.assertRaises(Comment.DoesNotExist):\n            Comment.objects.get(id=1)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.setUpTestData","title":"<code>setUpTestData()</code>  <code>classmethod</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0435\u0440\u0448\u0438\u0439 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls) -&gt; None:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0432\u043e\u0440\u044e\u0454 \u043f\u0435\u0440\u0448\u0438\u0439 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f.\"\"\"\n    cls.author = Author.objects.create(\n        username=\"test_user\", email=\"test@gmail.com\"\n    )\n    Comment.objects.create(\n        text=\"test comment\", author=cls.author, parent=None\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_model_string_representation","title":"<code>test_model_string_representation()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e str.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_model_string_representation(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454 \u0440\u044f\u0434\u043a\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e __str__.\"\"\"\n    obj = self.model.objects.first()\n    self.assertEqual(str(obj), f\"{obj.pk} from {obj.author}\")\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_home_page_blank","title":"<code>test_home_page_blank()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_home_page_blank(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"home_page\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_home_page_null","title":"<code>test_home_page_null()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u0454 null = true.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_home_page_null(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u0454 null = true.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"home_page\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_home_page_verbose_name","title":"<code>test_home_page_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u043c\u0430\u0454 verbose_name = '\u0434\u043e\u043c\u0430\u0448\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_home_page_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 Home_Page \u043c\u0430\u0454 verbose_name = '\u0434\u043e\u043c\u0430\u0448\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"home_page\").verbose_name, \"Home page\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_text_blank","title":"<code>test_text_blank()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_text_blank(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u0432\u043e.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"text\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_text_null","title":"<code>test_text_null()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u0454 null = false.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_text_null(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u0454 null = false.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"text\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_text_verbose_name","title":"<code>test_text_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = 'body comment'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_text_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = 'body comment'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"text\").verbose_name, \"Comment body\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_upload_to","title":"<code>test_file_upload_to()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u0454 upload_to = 'comment_files/'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_upload_to(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u0454 upload_to = 'comment_files/'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"file\").upload_to, \"comment_files/\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_blank","title":"<code>test_file_blank()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_blank(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"file\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_null","title":"<code>test_file_null()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u0454 null = true.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_null(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u0454 null = true.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"file\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_verbose_name","title":"<code>test_file_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u0454 verbose_name = '\u0434\u043e\u0434\u0430\u043d\u0438\u0439 \u0444\u0430\u0439\u043b \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u0454 verbose_name = '\u0434\u043e\u0434\u0430\u043d\u0438\u0439 \u0444\u0430\u0439\u043b \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"file\").verbose_name,\n        \"Attached comment file\",\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_created_auto_now_add","title":"<code>test_created_auto_now_add()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 auto_now_add = true.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_created_auto_now_add(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 auto_now_add = true.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"created\").auto_now_add)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_created_verbose_name","title":"<code>test_created_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = '\u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u0439 dateTime'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_created_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = '\u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u0439 dateTime'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"created\").verbose_name,\n        \"Created datetime\",\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_null","title":"<code>test_parent_null()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u0454 null = true.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_null(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u0454 null = true.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"parent\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_blank","title":"<code>test_parent_blank()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_blank(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043f\u043e\u0440\u043e\u0436\u043d\u0454 = \u043f\u0440\u0430\u0432\u0434\u0430.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"parent\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_default","title":"<code>test_parent_default()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c = \u043d\u0435\u043c\u0430\u0454.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_default(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c = \u043d\u0435\u043c\u0430\u0454.\"\"\"\n    self.assertIsNone(self.model._meta.get_field(\"parent\").default)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_verbose_name","title":"<code>test_parent_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = '\u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0438\u0439 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 \u043c\u0430\u0454 verbose_name = '\u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0438\u0439 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"parent\").verbose_name, \"Parent comment\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_on_delete","title":"<code>test_parent_on_delete()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 on_delete \u0454 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u043c.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_on_delete(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 on_delete \u0454 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u043c.\"\"\"\n    Comment.objects.get(id=1).delete()\n    with self.assertRaises(Comment.DoesNotExist):\n        Comment.objects.get(id=1)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_author_verbose_name","title":"<code>test_author_verbose_name()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0430\u0432\u0442\u043e\u0440\u0430 \u043c\u0430\u0454 verbose_name = '\u0430\u0432\u0442\u043e\u0440 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_author_verbose_name(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u043f\u043e\u043b\u0435 \u0430\u0432\u0442\u043e\u0440\u0430 \u043c\u0430\u0454 verbose_name = '\u0430\u0432\u0442\u043e\u0440 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"author\").verbose_name, \"Comment author\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_author_on_delete","title":"<code>test_author_on_delete()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0430\u0432\u0442\u043e\u0440\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 on_delete \u0454 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u043c.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_author_on_delete(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u0441\u0442\u0443\u0454, \u0449\u043e \u0430\u0432\u0442\u043e\u0440\u0441\u044c\u043a\u0435 \u043f\u043e\u043b\u0435 on_delete \u0454 \u043a\u0430\u0441\u043a\u0430\u0434\u043e\u043c.\"\"\"\n    Comment.objects.get(id=1).delete()\n    with self.assertRaises(Comment.DoesNotExist):\n        Comment.objects.get(id=1)\n</code></pre>"},{"location":"comments/tests/test_views/","title":"test_views.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044c \u0434\u043e\u0434\u0430\u0442\u043a\u0443 'comments'.</p>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase","title":"<code>CommentListViewTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0441\u043f\u0438\u0441\u043a\u0443 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>class CommentListViewTestCase(TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0441\u043f\u0438\u0441\u043a\u0443 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    url = \"/\"\n    name = \"list\"\n    template_name = \"comments/comment_list.html\"\n    queryset = Comment.objects.all().filter(parent_id__isnull=True)\n\n    @classmethod\n    def setUpTestData(cls) -&gt; None:\n        \"\"\"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0434\u0430\u043d\u0456 \u0442\u0435\u0441\u0442\u0456\u0432, \u0441\u0442\u0432\u043e\u0440\u044e\u044e\u0447\u0438 28 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n        for count in range(1, 29):\n            Comment.objects.create(\n                text=f\"Tests comment #{count}\",\n                author=Author.objects.create(\n                    username=f\"test_user_{count}\",\n                    email=f\"test_user_{count}@gmail.com\",\n                ),\n            )\n\n    def setUp(self) -&gt; None:\n        \"\"\"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0442\u0435\u0441\u0442\u0438, \u043e\u0442\u0440\u0438\u043c\u0430\u044e\u0447\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0437 URL -\u0430\u0434\u0440\u0435\u0441\u0438 \u0432\u0438\u0434\u0443.\"\"\"\n        self.response = self.client.get(self.url)\n\n    def test_view_url_exists_at_desired_location(self):\n        \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0432\u0430\u043d\u043d\u044f, \u0449\u043e \u0432\u0438\u0434 \u0456\u0441\u043d\u0443\u0454 \u0443 \u0431\u0430\u0436\u0430\u043d\u043e\u043c\u0443 \u043c\u0456\u0441\u0446\u0456.\"\"\"\n        self.assertEqual(self.response.status_code, 200)\n\n    def test_view_uses_correct_template(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0443 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439 \u0448\u0430\u0431\u043b\u043e\u043d.\"\"\"\n        self.assertEqual(self.response.status_code, 200)\n        self.assertTemplateUsed(self.response, self.template_name)\n\n    def test_view_url_accessible_by_name(self):\n        \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0439\u043e\u0433\u043e \u0456\u043c\u0435\u043d\u0456.\"\"\"\n        response = self.client.get(reverse(self.name))\n        self.assertEqual(response.status_code, 200)\n\n    def test_comment_form_is_in_context(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0444\u043e\u0440\u043c\u0430 \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0456.\"\"\"\n        self.assertIn(\"form\", self.response.context)\n        self.assertIsInstance(self.response.context[\"form\"], CommentModelForm)\n\n    def test_lists_comments(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        self.assertIn(\"page_obj\", self.response.context)\n        self.assertEqual(\n            self.response.context[\"page_obj\"].object_list,\n            list(self.queryset[:25]),\n        )\n\n    # * ------------------ Testing pagination functionality -------------------\n\n    def test_pagination_is_twenty_five(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e Pagition \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u043d\u0430 25 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443.\"\"\"\n        self.assertEqual(len(self.response.context[\"page_obj\"]), 25)\n\n    def test_paginated_product_list(self):\n        \"\"\"\u0414\u0440\u0443\u0433\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u0442\u0435\u0441\u0442\u0456\u0432 \u043c\u0430\u0454 (\u0442\u043e\u0447\u043d\u043e) \u0437\u0430\u043b\u0438\u0448\u0438\u043b\u043e\u0441\u044c 3 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n        response = self.client.get(f\"{self.url}?page=2\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(len(response.context[\"page_obj\"]), 3)\n\n    def test_404_with_invalid_pagination_page_value(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438 Pagination \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u044c \u0434\u043e 404.\"\"\"\n        response = self.client.get(f\"{self.url}?page=0\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?page=3\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?page=string\")\n        self.assertEqual(response.status_code, 404)\n\n    # * ------------------- Testing ordering functionality --------------------\n\n    def test_lists_comments_ordered_by_created_desc_by_default(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u043c\u0438 (DESC) \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c, \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        self.assertEqual(\n            self.response.context[\"page_obj\"].object_list,\n            list(self.queryset[:25]),\n        )\n\n    def test_lists_comments_ordered_by_created_asc(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u043c\u0438 (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=asc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"created\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_username_asc(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0456\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=asc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"author__username\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_username_desc(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0456\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (DESC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=desc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"-author__username\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_email_asc(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u044e \u043f\u043e\u0448\u0442\u043e\u044e (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=asc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"author__email\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_email_desc(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u044e \u043f\u043e\u0448\u0442\u043e\u044e (DESC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=desc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"-author__email\")[:25]),\n        )\n\n    def test_404_with_invalid_order_parameters(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u044c \u0434\u043e 404.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=wrong&amp;orderdir=asc\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=wrong\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?orderby=wrong\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?orderdir=wrong\")\n        self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.setUpTestData","title":"<code>setUpTestData()</code>  <code>classmethod</code>","text":"<p>\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0434\u0430\u043d\u0456 \u0442\u0435\u0441\u0442\u0456\u0432, \u0441\u0442\u0432\u043e\u0440\u044e\u044e\u0447\u0438 28 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>@classmethod\ndef setUpTestData(cls) -&gt; None:\n    \"\"\"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0434\u0430\u043d\u0456 \u0442\u0435\u0441\u0442\u0456\u0432, \u0441\u0442\u0432\u043e\u0440\u044e\u044e\u0447\u0438 28 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n    for count in range(1, 29):\n        Comment.objects.create(\n            text=f\"Tests comment #{count}\",\n            author=Author.objects.create(\n                username=f\"test_user_{count}\",\n                email=f\"test_user_{count}@gmail.com\",\n            ),\n        )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.setUp","title":"<code>setUp()</code>","text":"<p>\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0442\u0435\u0441\u0442\u0438, \u043e\u0442\u0440\u0438\u043c\u0430\u044e\u0447\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0437 URL -\u0430\u0434\u0440\u0435\u0441\u0438 \u0432\u0438\u0434\u0443.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"\u0412\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0442\u0435\u0441\u0442\u0438, \u043e\u0442\u0440\u0438\u043c\u0430\u044e\u0447\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0437 URL -\u0430\u0434\u0440\u0435\u0441\u0438 \u0432\u0438\u0434\u0443.\"\"\"\n    self.response = self.client.get(self.url)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_view_url_exists_at_desired_location","title":"<code>test_view_url_exists_at_desired_location()</code>","text":"<p>\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0432\u0430\u043d\u043d\u044f, \u0449\u043e \u0432\u0438\u0434 \u0456\u0441\u043d\u0443\u0454 \u0443 \u0431\u0430\u0436\u0430\u043d\u043e\u043c\u0443 \u043c\u0456\u0441\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_view_url_exists_at_desired_location(self):\n    \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0432\u0430\u043d\u043d\u044f, \u0449\u043e \u0432\u0438\u0434 \u0456\u0441\u043d\u0443\u0454 \u0443 \u0431\u0430\u0436\u0430\u043d\u043e\u043c\u0443 \u043c\u0456\u0441\u0446\u0456.\"\"\"\n    self.assertEqual(self.response.status_code, 200)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_view_uses_correct_template","title":"<code>test_view_uses_correct_template()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0443 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439 \u0448\u0430\u0431\u043b\u043e\u043d.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_view_uses_correct_template(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0443 \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0438\u0439 \u0448\u0430\u0431\u043b\u043e\u043d.\"\"\"\n    self.assertEqual(self.response.status_code, 200)\n    self.assertTemplateUsed(self.response, self.template_name)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_view_url_accessible_by_name","title":"<code>test_view_url_accessible_by_name()</code>","text":"<p>\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0439\u043e\u0433\u043e \u0456\u043c\u0435\u043d\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_view_url_accessible_by_name(self):\n    \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0438\u0439 \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0439\u043e\u0433\u043e \u0456\u043c\u0435\u043d\u0456.\"\"\"\n    response = self.client.get(reverse(self.name))\n    self.assertEqual(response.status_code, 200)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_comment_form_is_in_context","title":"<code>test_comment_form_is_in_context()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0444\u043e\u0440\u043c\u0430 \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_comment_form_is_in_context(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0444\u043e\u0440\u043c\u0430 \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0456.\"\"\"\n    self.assertIn(\"form\", self.response.context)\n    self.assertIsInstance(self.response.context[\"form\"], CommentModelForm)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments","title":"<code>test_lists_comments()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    self.assertIn(\"page_obj\", self.response.context)\n    self.assertEqual(\n        self.response.context[\"page_obj\"].object_list,\n        list(self.queryset[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_pagination_is_twenty_five","title":"<code>test_pagination_is_twenty_five()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e Pagition \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u043d\u0430 25 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_pagination_is_twenty_five(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e Pagition \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u043d\u0430 25 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443.\"\"\"\n    self.assertEqual(len(self.response.context[\"page_obj\"]), 25)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_paginated_product_list","title":"<code>test_paginated_product_list()</code>","text":"<p>\u0414\u0440\u0443\u0433\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u0442\u0435\u0441\u0442\u0456\u0432 \u043c\u0430\u0454 (\u0442\u043e\u0447\u043d\u043e) \u0437\u0430\u043b\u0438\u0448\u0438\u043b\u043e\u0441\u044c 3 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_paginated_product_list(self):\n    \"\"\"\u0414\u0440\u0443\u0433\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u0442\u0435\u0441\u0442\u0456\u0432 \u043c\u0430\u0454 (\u0442\u043e\u0447\u043d\u043e) \u0437\u0430\u043b\u0438\u0448\u0438\u043b\u043e\u0441\u044c 3 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n    response = self.client.get(f\"{self.url}?page=2\")\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.context[\"page_obj\"]), 3)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_404_with_invalid_pagination_page_value","title":"<code>test_404_with_invalid_pagination_page_value()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438 Pagination \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u044c \u0434\u043e 404.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_404_with_invalid_pagination_page_value(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438 Pagination \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u044c \u0434\u043e 404.\"\"\"\n    response = self.client.get(f\"{self.url}?page=0\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?page=3\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?page=string\")\n    self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_created_desc_by_default","title":"<code>test_lists_comments_ordered_by_created_desc_by_default()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u043c\u0438 (DESC) \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c, \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_created_desc_by_default(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u043c\u0438 (DESC) \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c, \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    self.assertEqual(\n        self.response.context[\"page_obj\"].object_list,\n        list(self.queryset[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_created_asc","title":"<code>test_lists_comments_ordered_by_created_asc()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u043c\u0438 (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_created_asc(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u043c\u0438 (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=asc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"created\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_username_asc","title":"<code>test_lists_comments_ordered_by_username_asc()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0456\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_username_asc(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0456\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=asc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"author__username\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_username_desc","title":"<code>test_lists_comments_ordered_by_username_desc()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0456\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (DESC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_username_desc(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0456\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 (DESC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=desc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"-author__username\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_email_asc","title":"<code>test_lists_comments_ordered_by_email_asc()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u044e \u043f\u043e\u0448\u0442\u043e\u044e (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_email_asc(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u044e \u043f\u043e\u0448\u0442\u043e\u044e (ASC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=asc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"author__email\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_email_desc","title":"<code>test_lists_comments_ordered_by_email_desc()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u044e \u043f\u043e\u0448\u0442\u043e\u044e (DESC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_email_desc(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456, \u0443\u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u043d\u0456 \u0435\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u044e \u043f\u043e\u0448\u0442\u043e\u044e (DESC), \u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0456 \u043d\u0430 \u0441\u0442\u043e\u0440\u0456\u043d\u0446\u0456.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=desc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"-author__email\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_404_with_invalid_order_parameters","title":"<code>test_404_with_invalid_order_parameters()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u044c \u0434\u043e 404.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_404_with_invalid_order_parameters(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u044f\u043a\u0456 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u044c \u0434\u043e 404.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=wrong&amp;orderdir=asc\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=wrong\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?orderby=wrong\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?orderdir=wrong\")\n    self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase","title":"<code>CommentCreateViewTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043e\u0434\u0430\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>class CommentCreateViewTestCase(TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043e\u0434\u0430\u0432\u0430\u043d\u043d\u044f \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432.\"\"\"\n\n    url = \"/add/\"\n\n    def test_405_withget_request(self):\n        \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 404 \u0456\u0437 \u0437\u0430\u043f\u0438\u0442\u043e\u043c GET.\"\"\"\n        response = self.client.get(self.url)\n        self.assertEqual(response.status_code, 405)\n\n    def test_adding_comment_with_valid_form_data(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0456\u0437 \u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n        response = self.test_comment_form_for_validity_and_get_response(\n            self.get_valid_form_data()\n        )\n        self.assertContains(response, \"Your comment has successfully added.\")\n\n    def test_adding_comment_with_invalid_form_data(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0437 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n        form_data = self.get_valid_form_data()\n        form_data[\"username\"] = \"test user\"\n        response = self.test_comment_form_for_validity_and_get_response(\n            form_data, is_valid=False\n        )\n        self.assertContains(response, \"Invalid form data.\")\n\n    def test_adding_answer_with_valid_form_data(self):\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0437 \u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n        comment = Comment.objects.create(\n            text=f\"Tests comment\",\n            author=Author.objects.create(\n                username=f\"test_user\",\n                email=f\"test_user@gmail.com\",\n            ),\n        )\n        form_data = self.get_valid_form_data()\n        form_data[\"comment_parent_id\"] = comment.id\n        response = self.test_comment_form_for_validity_and_get_response(\n            form_data\n        )\n        self.assertContains(response, \"Your answer has successfully added.\")\n\n    def test_404_with_nonexistent_parent_id(self):\n        \"\"\"\u0422\u0435\u0441\u0442, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 404 \u0437 \u043d\u0435\u0456\u0441\u043d\u0443\u044e\u0447\u043e\u044e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u044e id.\"\"\"\n        # ! I think it's valid test, but it returns 405.\n        # form_data = self.get_valid_form_data()\n        # form_data[\"comment_parent_id\"] = 100\n        # response = self.test_comment_form_for_validity_and_get_response(\n        #     form_data, is_valid=False, status_code=404\n        # )\n        # self.assertContains(response, \"Not Found\")\n\n    def get_valid_form_data(self) -&gt; dict:\n        \"\"\"\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u0456\u0439\u0441\u043d\u0456 \u0434\u0430\u043d\u0456 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n        return {\n            \"username\": \"test_user\",\n            \"email\": \"test_user@gmail.com\",\n            \"text\": \"Test comment\",\n        }\n\n    def test_comment_form_for_validity_and_get_response(\n        self, form_data: dict, is_valid: bool = True, status_code: int = 200\n    ) -&gt; HttpResponse:\n        \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0444\u043e\u0440\u043c\u0430 \u0454 \u0434\u0456\u0439\u0441\u043d\u043e\u044e \u0430\u0431\u043e \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u043e\u044e \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0437\u0430\u0434\u0430\u043d\u043e\u0457 \u0444\u043e\u0440\u043c\u0438_data, \u0456 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c.\"\"\"\n        (\n            self.assertTrue(CommentModelForm(form_data).is_valid())\n            if is_valid\n            else self.assertFalse(CommentModelForm(form_data).is_valid())\n        )\n        response = self.client.post(\n            self.url, data=form_data, follow=True  # follow redirects\n        )\n        self.assertEqual(response.status_code, status_code)\n        return response\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_405_withget_request","title":"<code>test_405_withget_request()</code>","text":"<p>\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 404 \u0456\u0437 \u0437\u0430\u043f\u0438\u0442\u043e\u043c GET.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_405_withget_request(self):\n    \"\"\"\u0412\u0438\u043f\u0440\u043e\u0431\u0443\u0454, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 404 \u0456\u0437 \u0437\u0430\u043f\u0438\u0442\u043e\u043c GET.\"\"\"\n    response = self.client.get(self.url)\n    self.assertEqual(response.status_code, 405)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_adding_comment_with_valid_form_data","title":"<code>test_adding_comment_with_valid_form_data()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0456\u0437 \u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_adding_comment_with_valid_form_data(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0456\u0437 \u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n    response = self.test_comment_form_for_validity_and_get_response(\n        self.get_valid_form_data()\n    )\n    self.assertContains(response, \"Your comment has successfully added.\")\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_adding_comment_with_invalid_form_data","title":"<code>test_adding_comment_with_invalid_form_data()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0437 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_adding_comment_with_invalid_form_data(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440 \u0437 \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n    form_data = self.get_valid_form_data()\n    form_data[\"username\"] = \"test user\"\n    response = self.test_comment_form_for_validity_and_get_response(\n        form_data, is_valid=False\n    )\n    self.assertContains(response, \"Invalid form data.\")\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_adding_answer_with_valid_form_data","title":"<code>test_adding_answer_with_valid_form_data()</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0437 \u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_adding_answer_with_valid_form_data(self):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0434\u043e\u0434\u0430\u044e\u0442\u044c \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0437 \u0434\u0456\u0439\u0441\u043d\u0438\u043c\u0438 \u0434\u0430\u043d\u0438\u043c\u0438 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n    comment = Comment.objects.create(\n        text=f\"Tests comment\",\n        author=Author.objects.create(\n            username=f\"test_user\",\n            email=f\"test_user@gmail.com\",\n        ),\n    )\n    form_data = self.get_valid_form_data()\n    form_data[\"comment_parent_id\"] = comment.id\n    response = self.test_comment_form_for_validity_and_get_response(\n        form_data\n    )\n    self.assertContains(response, \"Your answer has successfully added.\")\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_404_with_nonexistent_parent_id","title":"<code>test_404_with_nonexistent_parent_id()</code>","text":"<p>\u0422\u0435\u0441\u0442, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 404 \u0437 \u043d\u0435\u0456\u0441\u043d\u0443\u044e\u0447\u043e\u044e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u044e id.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_404_with_nonexistent_parent_id(self):\n    \"\"\"\u0422\u0435\u0441\u0442, \u0449\u043e \u043f\u0435\u0440\u0435\u0433\u043b\u044f\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 404 \u0437 \u043d\u0435\u0456\u0441\u043d\u0443\u044e\u0447\u043e\u044e \u0431\u0430\u0442\u044c\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u044e id.\"\"\"\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.get_valid_form_data","title":"<code>get_valid_form_data()</code>","text":"<p>\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u0456\u0439\u0441\u043d\u0456 \u0434\u0430\u043d\u0456 \u0444\u043e\u0440\u043c\u0438.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def get_valid_form_data(self) -&gt; dict:\n    \"\"\"\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0434\u0456\u0439\u0441\u043d\u0456 \u0434\u0430\u043d\u0456 \u0444\u043e\u0440\u043c\u0438.\"\"\"\n    return {\n        \"username\": \"test_user\",\n        \"email\": \"test_user@gmail.com\",\n        \"text\": \"Test comment\",\n    }\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_comment_form_for_validity_and_get_response","title":"<code>test_comment_form_for_validity_and_get_response(form_data, is_valid=True, status_code=200)</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0444\u043e\u0440\u043c\u0430 \u0454 \u0434\u0456\u0439\u0441\u043d\u043e\u044e \u0430\u0431\u043e \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u043e\u044e \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0437\u0430\u0434\u0430\u043d\u043e\u0457 \u0444\u043e\u0440\u043c\u0438_data, \u0456 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_comment_form_for_validity_and_get_response(\n    self, form_data: dict, is_valid: bool = True, status_code: int = 200\n) -&gt; HttpResponse:\n    \"\"\"\u0422\u0435\u0441\u0442\u0438, \u0449\u043e \u0444\u043e\u0440\u043c\u0430 \u0454 \u0434\u0456\u0439\u0441\u043d\u043e\u044e \u0430\u0431\u043e \u043d\u0435\u0434\u0456\u0439\u0441\u043d\u043e\u044e \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0437\u0430\u0434\u0430\u043d\u043e\u0457 \u0444\u043e\u0440\u043c\u0438_data, \u0456 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c.\"\"\"\n    (\n        self.assertTrue(CommentModelForm(form_data).is_valid())\n        if is_valid\n        else self.assertFalse(CommentModelForm(form_data).is_valid())\n    )\n    response = self.client.post(\n        self.url, data=form_data, follow=True  # follow redirects\n    )\n    self.assertEqual(response.status_code, status_code)\n    return response\n</code></pre>"},{"location":"general/error_views/","title":"error_views.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0438 \u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0434\u043b\u044f \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043e\u043a \u043f\u043e\u043c\u0438\u043b\u043e\u043a.</p>"},{"location":"general/error_views/#general.error_views.Error","title":"<code>Error</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 Tuple, \u044f\u043a\u0438\u0439 \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.</p> Source code in <code>general\\error_views.py</code> <pre><code>class Error(NamedTuple):\n    \"\"\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 Tuple, \u044f\u043a\u0438\u0439 \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\"\"\"\n\n    code: int\n    name: str\n    description: str\n</code></pre>"},{"location":"general/error_views/#general.error_views.ErrorView","title":"<code>ErrorView</code>","text":"<p>             Bases: <code>View</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0457 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0434\u043b\u044f \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438 \u043f\u043e\u043c\u0438\u043b\u043e\u043a.</p> Source code in <code>general\\error_views.py</code> <pre><code>class ErrorView(View):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0457 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0434\u043b\u044f \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u0457 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u043e\u0457 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0438 \u043f\u043e\u043c\u0438\u043b\u043e\u043a.\"\"\"\n\n    code: int\n    name: str\n    description: str\n\n    def get(self, request: HttpRequest, exception=None) -&gt; HttpResponse:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\n\n        Args:\n            request: \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n            exception (Exception): \u041e\u0431'\u0454\u043a\u0442 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\n\n        Returns:\n            HttpResponse: \u0421\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\n        \"\"\"\n        return render_error_page(\n            request, Error(self.code, self.name, self.description)\n        )\n</code></pre>"},{"location":"general/error_views/#general.error_views.ErrorView.get","title":"<code>get(request, exception=None)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>\u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.</p> required <code>exception</code> <code>Exception</code> <p>\u041e\u0431'\u0454\u043a\u0442 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>\u0421\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.</p> Source code in <code>general\\error_views.py</code> <pre><code>def get(self, request: HttpRequest, exception=None) -&gt; HttpResponse:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\n\n    Args:\n        request: \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n        exception (Exception): \u041e\u0431'\u0454\u043a\u0442 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\n\n    Returns:\n        HttpResponse: \u0421\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\n    \"\"\"\n    return render_error_page(\n        request, Error(self.code, self.name, self.description)\n    )\n</code></pre>"},{"location":"general/error_views/#general.error_views.CustomBadRequestView","title":"<code>CustomBadRequestView</code>","text":"<p>             Bases: <code>ErrorView</code></p> <p>\u0421\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 400 \u043a\u043e\u0434\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 HTTP.</p> Source code in <code>general\\error_views.py</code> <pre><code>class CustomBadRequestView(ErrorView):\n    \"\"\"\u0421\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 400 \u043a\u043e\u0434\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 HTTP.\"\"\"\n\n    code = 400\n    name = \"Bad Request\"\n    description = \"The server cannot or will not process the request.\"\n</code></pre>"},{"location":"general/error_views/#general.error_views.CustomNotFoundView","title":"<code>CustomNotFoundView</code>","text":"<p>             Bases: <code>ErrorView</code></p> <p>\u0421\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 404 \u043a\u043e\u0434\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 HTTP.</p> Source code in <code>general\\error_views.py</code> <pre><code>class CustomNotFoundView(ErrorView):\n    \"\"\"\u0421\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 404 \u043a\u043e\u0434\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 HTTP.\"\"\"\n\n    code = 404\n    name = \"Not Found\"\n    description = (\n        \"The server cannot find the requested resource. URL is not recognized.\"\n    )\n</code></pre>"},{"location":"general/error_views/#general.error_views.CustomServerErrorView","title":"<code>CustomServerErrorView</code>","text":"<p>             Bases: <code>ErrorView</code></p> <p>\u0421\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 500 \u043a\u043e\u0434\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 HTTP.</p> Source code in <code>general\\error_views.py</code> <pre><code>class CustomServerErrorView(ErrorView):\n    \"\"\"\u0421\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438 500 \u043a\u043e\u0434\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 HTTP.\"\"\"\n\n    code = 500\n    name = \"Internal Server Error\"\n    description = \"Sorry, an error occurred in the server. Try again.\"\n</code></pre>"},{"location":"general/error_views/#general.error_views.render_error_page","title":"<code>render_error_page(request, error)</code>","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0443\u0454 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 (\u044f\u043a\u0449\u043e \u0448\u0430\u0431\u043b\u043e\u043d \u0456\u0441\u043d\u0443\u0454) \u0437\u0430 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u044e.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>\u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.</p> required <code>error</code> <code>Error</code> <p>\u041e\u0431'\u0454\u043a\u0442 \u043f\u043e\u043c\u0438\u043b\u043a\u0438.</p> required <p>Returns:</p> Name Type Description <code>render</code> <code>HttpResponse</code> <p>\u0421\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.</p> Source code in <code>general\\error_views.py</code> <pre><code>def render_error_page(request: HttpRequest, error: Error) -&gt; HttpResponse:\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0432\u0456\u0437\u0443\u0430\u043b\u0456\u0437\u0443\u0454 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 (\u044f\u043a\u0449\u043e \u0448\u0430\u0431\u043b\u043e\u043d \u0456\u0441\u043d\u0443\u0454) \u0437\u0430 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u043f\u043e\u043c\u0438\u043b\u043a\u043e\u044e.\n\n    Args:\n        request: \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n        error: \u041e\u0431'\u0454\u043a\u0442 \u043f\u043e\u043c\u0438\u043b\u043a\u0438.\n\n    Returns:\n        render: \u0421\u0442\u043e\u0440\u0456\u043d\u043a\u0430 \u043f\u043e\u043c\u0438\u043b\u043a\u0438 \u0437 \u0432\u043a\u0430\u0437\u0430\u043d\u043e\u044e \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0454\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\n    \"\"\"\n    try:\n        return render(\n            request, \"error.html\", {\"error\": error}, status=error.code\n        )\n    except TemplateDoesNotExist:\n        return HttpResponse(\n            f\"\"\"\n            &lt;title&gt;{error.code} | LapZone&lt;/title&gt;\n            &lt;h1&gt;{error.name}&lt;/h1&gt;\n            &lt;h4&gt;{error.description}&lt;/h4&gt;\n            \"\"\",\n            status=error.code,\n        )\n</code></pre>"},{"location":"general/test_error_views/","title":"test_error_views.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u043b\u0430\u0441\u043d\u0438\u0445 \u043e\u0431\u0440\u043e\u0431\u043d\u0438\u043a\u0456\u0432 \u043f\u043e\u043c\u0438\u043b\u043e\u043a.</p>"},{"location":"general/test_error_views/#general.test_error_views.RaiseExceptionView","title":"<code>RaiseExceptionView</code>","text":"<p>             Bases: <code>View</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043a\u0438\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class RaiseExceptionView(View):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043a\u0438\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\"\"\"\n\n    exception: Exception\n\n    def get(self, request: HttpRequest) -&gt; NoReturn:\n        \"\"\"Raises the specified exception.\"\"\"\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\n\n        Raises:\n            exception: \u0412\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\n        \"\"\"\n        raise self.exception\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseExceptionView.get","title":"<code>get(request)</code>","text":"<p>Raises the specified exception.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def get(self, request: HttpRequest) -&gt; NoReturn:\n    \"\"\"Raises the specified exception.\"\"\"\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\n\n    Raises:\n        exception: \u0412\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0456 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\n    \"\"\"\n    raise self.exception\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseBadRequestView","title":"<code>RaiseBadRequestView</code>","text":"<p>             Bases: <code>RaiseExceptionView</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043a\u0438\u0434\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a 400 \u043f\u043e\u0433\u0430\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0438\u0442\u0443.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class RaiseBadRequestView(RaiseExceptionView):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043a\u0438\u0434\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a 400 \u043f\u043e\u0433\u0430\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0438\u0442\u0443.\"\"\"\n\n    exception = BadRequest\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseNotFoundView","title":"<code>RaiseNotFoundView</code>","text":"<p>             Bases: <code>RaiseExceptionView</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043a\u0438\u0434\u0430\u0454 404, \u043d\u0435 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u0438\u0439 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class RaiseNotFoundView(RaiseExceptionView):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043a\u0438\u0434\u0430\u0454 404, \u043d\u0435 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u0438\u0439 \u0432\u0438\u043d\u044f\u0442\u043a\u0443.\"\"\"\n\n    exception = Http404\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.ServerErrorView","title":"<code>ServerErrorView</code>","text":"<p>             Bases: <code>BaseView</code>, <code>View</code></p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043c\u0430\u0454 \u043f\u043e\u043c\u0438\u043b\u043a\u0443.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class ServerErrorView(BaseView, View):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f, \u0449\u043e \u043c\u0430\u0454 \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\"\"\"\n\n    def get(self, request: HttpRequest) -&gt; HttpResponse:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434 \u0442\u0438\u043c \u044f\u043a \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c.\n\n        Args:\n            request: \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n\n        Returns:\n            HttpResponse: \u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.\n        \"\"\"\n        print(1 / 0)  # ZeroDivisionError\n        return HttpResponse(\"Some content\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.ServerErrorView.get","title":"<code>get(request)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434 \u0442\u0438\u043c \u044f\u043a \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>\u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.</p> required <p>Returns:</p> Name Type Description <code>HttpResponse</code> <code>HttpResponse</code> <p>\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def get(self, request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u0432\u0438\u043d\u044f\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434 \u0442\u0438\u043c \u044f\u043a \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c.\n\n    Args:\n        request: \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n\n    Returns:\n        HttpResponse: \u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.\n    \"\"\"\n    print(1 / 0)  # ZeroDivisionError\n    return HttpResponse(\"Some content\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin","title":"<code>CustomErrorHandlerTestMixin</code>","text":"<p>\u0422\u0435\u0441\u0442\u043e\u0432\u0438\u0439 \u043c\u0456\u043a\u0441\u0438\u043d \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u043e\u0431\u0440\u043e\u0431\u043d\u0438\u043a\u0456\u0432 \u043f\u043e\u043c\u0438\u043b\u043e\u043a.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomErrorHandlerTestMixin:\n    \"\"\"\u0422\u0435\u0441\u0442\u043e\u0432\u0438\u0439 \u043c\u0456\u043a\u0441\u0438\u043d \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u044c\u043d\u0438\u0445 \u043e\u0431\u0440\u043e\u0431\u043d\u0438\u043a\u0456\u0432 \u043f\u043e\u043c\u0438\u043b\u043e\u043a.\"\"\"\n\n    error_handler: ErrorView\n\n    def setUp(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u0438\u043c \u043a\u043b\u0456\u0454\u043d\u0442\u043e\u043c \u0437\u0430 \u0437\u0433\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c url.\"\"\"\n        self.response = self.client.get(f\"/{self.error_handler.code}/\")\n\n    def test_view_status_code(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u043a\u043e\u0434\u0443.\"\"\"\n        self.assertEqual(self.response.status_code, self.error_handler.code)\n\n    def test_view_template(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0448\u0430\u0431\u043b\u043e\u043d \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 template_name.\"\"\"\n        self.assertTemplateUsed(self.response, \"error.html\")\n\n    def test_view_content(self):\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\"\"\"\n        self.assertContains(\n            self.response,\n            self.error_handler.name,\n            status_code=self.error_handler.code,\n        )\n        self.assertContains(\n            self.response,\n            self.error_handler.description,\n            status_code=self.error_handler.code,\n        )\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.setUp","title":"<code>setUp()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u0438\u043c \u043a\u043b\u0456\u0454\u043d\u0442\u043e\u043c \u0437\u0430 \u0437\u0433\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c url.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def setUp(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0454 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u0438\u043c \u043a\u043b\u0456\u0454\u043d\u0442\u043e\u043c \u0437\u0430 \u0437\u0433\u0435\u043d\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c url.\"\"\"\n    self.response = self.client.get(f\"/{self.error_handler.code}/\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.test_view_status_code","title":"<code>test_view_status_code()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u043a\u043e\u0434\u0443.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def test_view_status_code(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 \u043a\u043e\u0434\u0443.\"\"\"\n    self.assertEqual(self.response.status_code, self.error_handler.code)\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.test_view_template","title":"<code>test_view_template()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0448\u0430\u0431\u043b\u043e\u043d \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 template_name.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def test_view_template(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0448\u0430\u0431\u043b\u043e\u043d \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0456 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 template_name.\"\"\"\n    self.assertTemplateUsed(self.response, \"error.html\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.test_view_content","title":"<code>test_view_content()</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def test_view_content(self):\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454, \u0447\u0438 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u043f\u043e\u043c\u0438\u043b\u043a\u0443.\"\"\"\n    self.assertContains(\n        self.response,\n        self.error_handler.name,\n        status_code=self.error_handler.code,\n    )\n    self.assertContains(\n        self.response,\n        self.error_handler.description,\n        status_code=self.error_handler.code,\n    )\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomBadRequestViewTest","title":"<code>CustomBadRequestViewTest</code>","text":"<p>             Bases: <code>CustomErrorHandlerTestMixin</code>, <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CustomBadRequestView.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomBadRequestViewTest(CustomErrorHandlerTestMixin, TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CustomBadRequestView.\"\"\"\n\n    error_handler = CustomBadRequestView\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomNotFoundViewTest","title":"<code>CustomNotFoundViewTest</code>","text":"<p>             Bases: <code>CustomErrorHandlerTestMixin</code>, <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CustomNotFoundView.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomNotFoundViewTest(CustomErrorHandlerTestMixin, TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CustomNotFoundView.\"\"\"\n\n    error_handler = CustomNotFoundView\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomServerErrorViewTest","title":"<code>CustomServerErrorViewTest</code>","text":"<p>             Bases: <code>CustomErrorHandlerTestMixin</code>, <code>TestCase</code></p> <p>\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CustomServerErrorView.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomServerErrorViewTest(CustomErrorHandlerTestMixin, TestCase):\n    \"\"\"\u0422\u0435\u0441\u0442\u0438 \u0434\u043b\u044f CustomServerErrorView.\"\"\"\n\n    error_handler = CustomServerErrorView\n</code></pre>"},{"location":"general/views/","title":"views.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0438\u0439 \u043a\u043b\u0430\u0441 \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u043f\u043e\u0433\u043b\u044f\u0434\u0456\u0432.</p>"},{"location":"general/views/#general.views.BaseView","title":"<code>BaseView</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u0438\u0439 \u0432\u0438\u0433\u043b\u044f\u0434 \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u0456\u043d\u0448\u0438\u0445 \u043f\u043e\u0433\u043b\u044f\u0434\u0456\u0432 \u0456\u0437 \u043e\u0431\u0440\u043e\u0431\u043a\u043e\u044e \u0432\u0438\u043d\u044f\u0442\u043a\u0456\u0432.</p> Source code in <code>general\\views.py</code> <pre><code>class BaseView:\n    \"\"\"\u0411\u0430\u0437\u043e\u0432\u0438\u0439 \u0432\u0438\u0433\u043b\u044f\u0434 \u0434\u043b\u044f \u0432\u0441\u0456\u0445 \u0456\u043d\u0448\u0438\u0445 \u043f\u043e\u0433\u043b\u044f\u0434\u0456\u0432 \u0456\u0437 \u043e\u0431\u0440\u043e\u0431\u043a\u043e\u044e \u0432\u0438\u043d\u044f\u0442\u043a\u0456\u0432.\"\"\"\n\n    def dispatch(\n        self, request: http.HttpRequest, *args, **kwargs\n    ) -&gt; http.HttpResponse:\n        \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043a\u043e\u0436\u043d\u043e\u043c\u0443 HTTP-\u0437\u0430\u043f\u0438\u0442\u0456 \u0434\u043e \u043f\u043e\u0433\u043b\u044f\u0434\u0443.\n\n        Args:\n            request (http.HttpRequest): \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n\n        Raises:\n            e: \u0412\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u0438\u043d\u0438\u043a \u043f\u0456\u0434 \u0447\u0430\u0441 \u043e\u0431\u0440\u043e\u0431\u043a\u0438 \u0437\u0430\u043f\u0438\u0442\u0443.\n\n        Returns:\n            render_error_page: \u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.\n        \"\"\"\n        try:\n            return super().dispatch(request, *args, **kwargs)\n        except Exception as e:\n            exception_type = type(e)\n\n            # Check if it's an exception for which there is an error handler.\n            if exception_type in (http.Http404, BadRequest):\n                raise e\n\n            logger.error(\n                f\"{exception_type}('{str(e)}') during working with {request.path} URL\"\n            )\n\n            error_view = CustomServerErrorView\n            return render_error_page(\n                request,\n                Error(\n                    error_view.code, error_view.name, error_view.description\n                ),\n            )\n</code></pre>"},{"location":"general/views/#general.views.BaseView.dispatch","title":"<code>dispatch(request, *args, **kwargs)</code>","text":"<p>\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043a\u043e\u0436\u043d\u043e\u043c\u0443 HTTP-\u0437\u0430\u043f\u0438\u0442\u0456 \u0434\u043e \u043f\u043e\u0433\u043b\u044f\u0434\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>\u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.</p> required <p>Raises:</p> Type Description <code>e</code> <p>\u0412\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u0438\u043d\u0438\u043a \u043f\u0456\u0434 \u0447\u0430\u0441 \u043e\u0431\u0440\u043e\u0431\u043a\u0438 \u0437\u0430\u043f\u0438\u0442\u0443.</p> <p>Returns:</p> Name Type Description <code>render_error_page</code> <code>HttpResponse</code> <p>\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.</p> Source code in <code>general\\views.py</code> <pre><code>def dispatch(\n    self, request: http.HttpRequest, *args, **kwargs\n) -&gt; http.HttpResponse:\n    \"\"\"\u0426\u0435\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043a\u043e\u0436\u043d\u043e\u043c\u0443 HTTP-\u0437\u0430\u043f\u0438\u0442\u0456 \u0434\u043e \u043f\u043e\u0433\u043b\u044f\u0434\u0443.\n\n    Args:\n        request (http.HttpRequest): \u041e\u0431'\u0454\u043a\u0442 \u0437\u0430\u043f\u0438\u0442\u0443.\n\n    Raises:\n        e: \u0412\u0438\u043d\u044f\u0442\u043e\u043a, \u044f\u043a\u0438\u0439 \u0432\u0438\u043d\u0438\u043a \u043f\u0456\u0434 \u0447\u0430\u0441 \u043e\u0431\u0440\u043e\u0431\u043a\u0438 \u0437\u0430\u043f\u0438\u0442\u0443.\n\n    Returns:\n        render_error_page: \u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u043d\u0430 HTTP-\u0437\u0430\u043f\u0438\u0442.\n    \"\"\"\n    try:\n        return super().dispatch(request, *args, **kwargs)\n    except Exception as e:\n        exception_type = type(e)\n\n        # Check if it's an exception for which there is an error handler.\n        if exception_type in (http.Http404, BadRequest):\n            raise e\n\n        logger.error(\n            f\"{exception_type}('{str(e)}') during working with {request.path} URL\"\n        )\n\n        error_view = CustomServerErrorView\n        return render_error_page(\n            request,\n            Error(\n                error_view.code, error_view.name, error_view.description\n            ),\n        )\n</code></pre>"},{"location":"spa/settings/","title":"settings.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u043d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f Django-\u043f\u0440\u043e\u0435\u043a\u0442\u0443.</p>"},{"location":"spa/settings/#spa.settings.get_generated_captcha_challenge","title":"<code>get_generated_captcha_challenge()</code>","text":"<p>\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0433\u0435\u043d\u0435\u0440\u0443\u0454 \u0432\u0438\u043a\u043b\u0438\u043a \u0442\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0434\u043b\u044f CAPTCHA.</p> <p>Returns:</p> Name Type Description <code>CAPTCHA</code> <code>tuple[str, str]</code> <p>\u0432\u0438\u043a\u043b\u0438\u043a, \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c</p> Source code in <code>spa\\settings.py</code> <pre><code>def get_generated_captcha_challenge() -&gt; tuple[str, str]:\n    \"\"\"\u0426\u044f \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0433\u0435\u043d\u0435\u0440\u0443\u0454 \u0432\u0438\u043a\u043b\u0438\u043a \u0442\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c \u0434\u043b\u044f CAPTCHA.\n\n    Returns:\n        CAPTCHA: \u0432\u0438\u043a\u043b\u0438\u043a, \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c\n    \"\"\"\n    challenge = \"\".join(choices(string.ascii_uppercase + string.digits, k=5))\n    response = challenge.lower()\n    return (challenge, response)\n</code></pre>"},{"location":"spa/urls/","title":"urls.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u043d\u0430\u0439\u0433\u043e\u043b\u043e\u0432\u043d\u0456\u0448\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a URL-\u0430\u0434\u0440\u0435\u0441, \u044f\u043a\u0456 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0456.</p> <pre><code>handler400 = CustomBadRequestView.as_view()\nhandler404 = CustomNotFoundView.as_view()\n\nurlpatterns = [\n    path(\"captcha/\", include(\"captcha.urls\")),\n    path(\"\", include(\"comments.urls\")),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre>"},{"location":"spa/wsgi/","title":"wsgi.py","text":"<p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0454\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u043e\u0437\u0433\u043e\u0440\u0442\u0430\u043d\u043d\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0456.</p> <p>\u0426\u0435\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u0456\u0441\u0442\u0438\u0442\u044c WSGI-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0440\u043e\u0437\u0433\u043e\u0440\u0442\u0430\u043d\u043d\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0456.  WSGI (Web Server Gateway Interface) - \u0446\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0438\u0439 \u0456\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u0456\u0436 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438 \u0456 \u0432\u0435\u0431-\u0434\u043e\u0434\u0430\u0442\u043a\u0430\u043c\u0438 \u0434\u043b\u044f Python.  WSGI-\u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u0437\u0430 \u043e\u0431\u0440\u043e\u0431\u043a\u0443 \u0437\u0430\u043f\u0438\u0442\u0456\u0432, \u044f\u043a\u0456 \u043d\u0430\u0434\u0445\u043e\u0434\u044f\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440, \u0456 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0457\u0445 \u0432\u0435\u0431-\u0434\u043e\u0434\u0430\u0442\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u043e\u0431\u043a\u0438.</p> <pre><code>import os\n\nfrom django.core.wsgi import get_wsgi_application\n\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"spa.settings\")\n\napplication = get_wsgi_application()\n</code></pre>"}]}